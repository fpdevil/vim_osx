%%%-----------------------------------------------------------------------------
%%% File: frequency.erl
%%% @author Sampath Singamsetty <Singamsetty.Sampath@gmail.com>
%%% @copyright (C) 2017 Sampath Singamsetty
%%% @doc
%%%
%%% @end
%%% Created 25 Sep 2017
%%%-----------------------------------------------------------------------------

-module(frequency).
-export([start/0, stop/0, allocate/0, deallocate/1]).
-export([init/0]).

start() ->
  register(?MODULE, spawn(?MODULE, init, [])).

init() ->
  process_flag(trap_exit, true),
  %% freqency set format {[Available Frequencies], [{Allocated Frequency, Pid}]}
  Frequencies = {get_frequencies(), []},
  io:format("initializing with value set ~p", [Frequencies]),
  loop(Frequencies).

get_frequencies() ->
  lists:seq(1001,1020).

%% client api
stop() ->
  call(stop).

allocate() ->
  call(allocate).

deallocate(Frequency) ->
  call({deallocate, Frequency}).

%% handle forwarding the requests and matching response to/from loop
call(Message) ->
  ?MODULE ! {request, self(), Message},
  io:format("request for ~p with pid ~p~n",[Message, self()]),
  receive
    {reply, Reply} ->
      Reply
  end.

%% handle responses to the call function
reply(Pid, Message) ->
  io:format("handling reply message ~p for pid ~p~n",[Message, Pid]),
  Pid ! {reply, Message}.

loop(Frequencies) ->
  receive
    {request, Pid, allocate} ->
      {NewFrequencies, Reply} = allocate(Frequencies, Pid),
      io:format("replying ~p for allocation request from ~p~n", [Reply, Pid]),
      reply(Pid, Reply),
      loop(NewFrequencies);
    {request, Pid, {deallocate, Frequency}} ->
      NewFrequencies = deallocate(Frequencies, Frequency),
      io:format("deallocating the frequency ~p for ~p~n", [Frequency, Pid]),
      reply(Pid, ok),
      loop(NewFrequencies);
    {'EXIT', Pid, Reason} ->
      io:format("exit message ~p from ~p~n", [Reason, Pid]),
      NewFrequencies = quit(Frequencies, Pid),
      loop(NewFrequencies);
    {request, Pid, stop} ->
      io:format("quit message from ~p~n", [Pid]),
      reply(Pid, ok)
  end.

allocate({[], Allocated}, Pid) ->
  io:format("{error: no_frequencies, allocated: ~p, pid: ~p}~n", [Allocated, Pid]),
  {{[], Allocated}, {error, no_frequencies}};
allocate({[H | Frequencies], Allocated}, Pid) ->
  link(Pid),
  {{Frequencies, [{H, Pid} | Allocated]}, {ok, H}}.

deallocate({Free, Allocated}, Frequency) ->
  io:format("deallocation of frequency ~p~n",[Frequency]),
  case proplists:lookup(Frequency, Allocated) of
    {Frequency, Pid} ->
      unlink(Pid),
      NewAllocated = proplists:delete(Frequency, Allocated),
      {[Frequency | Free], NewAllocated};
    none ->
      error_logger:error_msg("deallocation frequency ~p not found~n",[Frequency]),
      {{Free, Allocated}, {error, not_found}}
    end.

quit({Free, Allocated}, Pid) ->
  case lists:keysearch(Pid, 2, Allocated) of
    {value, {Frequency, Pid}} ->
      NewAllocated = lists:keydelete(Frequency, 1, Allocated),
      {[Frequency | Free], NewAllocated};
    false ->
      {Free, Allocated}
    end.
