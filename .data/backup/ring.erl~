%%%-----------------------------------------------------------------------------
%%% File: ring.erl
%%% @author Sampath Singamsetty <Singamsetty.Sampath@gmail.com>
%%% @copyright (C) 2017 Sampath Singamsetty
%%% @doc
%%%
%%% @end
%%% Created 24 Sep 2017
%%%-----------------------------------------------------------------------------

-module(ring).
-compile([export_all]).


%% Erlang Programming Exercise 4.2
%% Write a program that will create N processes connected in a ring. Once
%% started, these  processes will  send M number  of messages  around the
%% ring  and then terminate gracefully  when received a quit message. You
%% can start the ring with the call ring:start(M, N, Message).
start(M, N, Message) ->
  io:format("** starting ring with ~p processes, ~p messages and message ~p~n", [N, M, Message]),
  Pid = spawn(?MODULE, start_ring, [N]),
  Pid ! {message, Message, M},
  ok.

%% start the first process which would propagate its pid down the chain so
%% that the last pid down the chain knows who is its next pid.
start_ring(Num) ->
  io:format("{spawned the head process ~p with id ~p}~n",[self(), Num]),
  Pid = spawn(?MODULE, start_ring, [Num - 1, self()]),
  loop(Pid).

start_ring(0, Next) ->
  io:format("{process ~p linking last process ~p}~n",[self(), Next]),
  loop(Next);
start_ring(Num, Next) ->
  io:format("{spawned next process ~p with id ~p}~n",[self(), Num]),
  Pid = spawn(?MODULE, start_ring, [Num - 1, Next]),
  loop(Pid).

loop(Pid) ->
  receive
    {message, _, 0} ->
      io:format("done~n"),
      true;
    {message, Message, M} ->
      io:format("{got message ~p for process ~p with count ~p}~n",[Message, self(), M]),
      Pid ! {message, Message, M - 1},
      loop(Pid)
  end.

% 1> ring:start(5,6,"process ring").
% ** starting ring with 6 processes, 5 messages and message "process ring"
% {spawned the head process <0.68.0> with id 6}
% ok
% {got message "process ring" for process <0.68.0> with count 5}
% {spawned next process <0.69.0> with id 5}
% {got message "process ring" for process <0.69.0> with count 4}
% {spawned next process <0.71.0> with id 4}
% {got message "process ring" for process <0.71.0> with count 3}
% {spawned next process <0.72.0> with id 3}
% {got message "process ring" for process <0.72.0> with count 2}
% {spawned next process <0.73.0> with id 2}
% {got message "process ring" for process <0.73.0> with count 1}
% {spawned next process <0.74.0> with id 1}
% done
% {process <0.75.0> linking last process <0.68.0>}
