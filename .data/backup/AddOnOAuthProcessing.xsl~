<?xml version="1.0" encoding="utf-8"?>
<!--#===============================================================================================================#-->
<!--#  Property of United Airlines                                                                                  #-->
<!--#  Copyright (c) United Airlines., 2017 All Rights Reserved.                                                    #-->
<!--#                                                                                                               #-->
<!--#  File                 :      AddOnOAuthProcessing.xsl                                                         #-->
<!--#  Author               :                                                                                       #-->
<!--#  Contact              :      Raj Damera, MW Engg for any changes or amendments                                #-->
<!--#  Current Version      :      $$ 1.0                                                                           #-->
<!--#  Description          :      This transformation will do some custom processing of the authenticated oauth    #-->
<!--#                              data during various oauth phases as described in the documentation. Refer to the #-->
<!--#                              individuak doc strings and comments for more details                             #-->
<!--#                                                                                                               #-->
<!--#  Documentation        :      https://www.ibm.com/support/knowledgecenter/SS9H2Y_7.5.0                         #-->
<!--#                                       /com.ibm.dp.doc/aaa_oauthsupport.html                                   #-->
<!--#                                                                                                               #-->
<!--#  Revision History     :      $$ v1 updates (initial commit)                                                   #-->
<!--#===============================================================================================================#-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                              xmlns:dp="http://www.datapower.com/extensions"
                              xmlns:dpconfig="http://www.datapower.com/param/config"
                              xmlns:dpfunc="http://www.datapower.com/extensions/functions"
                              xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
                              xmlns:dpquery="http://www.datapower.com/param/query"
                              xmlns:json="http://www.ibm.com/xmlns/prod/2009/jsonx"
                              xmlns:xs="http://www.w3.org/2001/XMLSchema"
                              xmlns:exslt="http://exslt.org/common"
                              extension-element-prefixes="json dp dpfunc xs dpconfig dpquery env exslt"
                              exclude-result-prefixes="json dp dpfunc dpconfig dpquery xs env exslt">
    <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes" omit-xml-declaration="yes" />

    <!--###############################################################################-->
    <!--## get the initial time of transaction from the real-time dp data            ##-->
    <!--###############################################################################-->
    <xsl:variable name="init_time">
        <xsl:value-of select="dp:variable('var://service/time-elapsed')" />
    </xsl:variable>

    <!--###############################################################################-->
    <!--## http request headers for convertors and service calls                     ##-->
    <!--###############################################################################-->
    <xsl:param name="httpHeaders">
        <header name="Content-Type">text/xml</header>
    </xsl:param>

    <!--###############################################################################-->
    <!--## get the oauth basic and css application profile information               ##-->
    <!--## The static xml file will maintain information like css service url's,     ##-->
    <!--## a valid ssl profile for tls connectivity, static application profiles     ##-->
    <!--## specifically created for each user category                               ##-->
    <!--###############################################################################-->
    <xsl:param name="location" select="'local:///CSRApp/'" />
    <xsl:param name="params-metadata" select="concat($location, 'injection-parameters.xml')" />

    <!--###############################################################################-->
    <!--## set context variables for oauth id metadata from the config file          ##-->
    <!--###############################################################################-->
    <xsl:param name="metadata">
        <xsl:copy-of select="document($params-metadata)" />
    </xsl:param>

    <!--###############################################################################-->
    <!--## Datapower Log Category for logging the information to a static log file   ##-->
    <!--## Ensure that this category is created                                      ##-->
    <!--###############################################################################-->
    <xsl:param name="dp-log-category">
        <xsl:variable name="log_temp" select="dp:variable('var://context/CSRApp/dpLogCategory')" />
        <xsl:choose>
            <xsl:when test="$log_temp != ''">
                <xsl:value-of select="$log_temp" />
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="string($metadata/injection-parameters/common/token-log/text())" />
            </xsl:otherwise>
        </xsl:choose>
    </xsl:param>

    <!--############################################################################-->
    <!--## gatewayscript file to execute for profile service                      ##-->
    <!--############################################################################-->
    <!-- <xsl:param name="gw_script" select="'GetAgentProfile.js'"/> -->
    <xsl:param name="gw_script" select="'GetAgentProfile.js'"/>

    <!--###############################################################################-->
    <!--## client or the end-user local ip address                                   ##-->
    <!--###############################################################################-->
    <xsl:variable name="client_ip" select="dp:variable('var://service/transaction-client')" />

    <!--###############################################################################-->
    <!--## set logger statement prefix for identifying the events.                   ##-->
    <!--###############################################################################-->
    <xsl:param name="lp" select="'[CSRApp AddOnOAuthProcessing]'" />

    <xsl:template match="/">
        <xsl:choose>
            <!--******************************************************************************-->
            <!--** ACCESS TOKEN REQUEST type=access_request                                 **-->
            <!--** After successfully generating an access token, processing returns a node **-->
            <!--** set that becomes part of the JSON object that contains the access token. **-->
            <!--**  INPUT DATA                                                              **-->
            <!--**  <input>                                                                 **-->
            <!--**    <operation>access_request</operation>                                 **-->
            <!--**    <result>                                                              **-->
            <!--**      <access_token>…</access_token>                                      **-->
            <!--**      <expires_in type="json:number">…</expires_in>                       **-->
            <!--**      <scope>…</scope>                                                    **-->
            <!--**    </result>                                                             **-->
            <!--**    <container>                                                           **-->
            <!--**      <identity>…</identity>                                              **-->
            <!--**      <credentials>…</credentials>                                        **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                          **-->
            <!--**      <resource>…</resource>                                              **-->
            <!--**      <mapped-resource>…</mapped-resource>                                **-->
            <!--**      <approved/>                                                         **-->
            <!--**      <message>…</message>                                                **-->
            <!--**       …                                                                  **-->
            <!--**    </container>                                                          **-->
            <!--**  </input>                                                                **-->
            <!--** After processing, the output contains a <result> node that contains the  **-->
            <!--** custom data. Processing can return an empty node.                        **-->
            <!--**  <result>                                                                **-->
            <!--**    <custom_data>…</custom_data>                                          **-->
            <!--**      …                                                                   **-->
            <!--**    <custom_sum type="json:number">…</custom_sum>                         **-->
            <!--**  </result>                                                               **-->
            <!--** For all the supported grant types, at the end of a successful a oauth    **-->
            <!--** handshake, an access token will be returned in a JSON object or as part  **-->
            <!--** of the redirect URI                                                      **-->
            <!--******************************************************************************-->
            <xsl:when test="/input/operation/text()='access_request'">
                <dp:set-variable name="'var://context/oauth/type'" value="'access_request'" />
                <!--###############################################################################-->
                <!--## get the oauth client identifier from the incoming request payload         ##-->
                <!--###############################################################################-->
                <xsl:variable name="client_id" select="string(dp:variable('var://context/CSRApp/client_id'))" />

                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> GET AGENT PROFILE SERVICE RESPONSE <xsl:value-of select="dp:variable('var://context/CSRApp/get_agent_profile_status')"/>, employee info <xsl:value-of select="dp:variable('var://context/CSRApp/agent_profile_name')"/>*
                </xsl:message>
                <xsl:variable name="profile_status" select="string(dp:variable('var://context/CSRApp/get_agent_profile_status'))"/>
                <xsl:choose>
                    <xsl:when test="$profile_status='true'">
                        <xsl:variable name="profile_data" select="normalize-space(dp:variable('var://context/CSRApp/agent_profile_name'))" />
                        <xsl:variable name="employee" select="substring-after((substring-before((substring-after($profile_data,'username')),',')),':')"/>
                        <xsl:variable name="gn" select="substring-after(substring-before(substring-after($profile_data,'given_name'),','),':')"/>
                        <xsl:variable name="fn" select="substring-after(substring-before(substring-after($profile_data,'family_name'),'}'),':')"/>
                        <result>
                            <employeeId>
                                <xsl:value-of select="translate($employee, '\&quot;', '')"/>
                            </employeeId>
                            <givenname>
                                <xsl:value-of select="translate($gn, '\&quot;', '')"/>
                            </givenname>
                            <surname>
                                <xsl:value-of select="translate($fn, '\&quot;', '')"/>
                            </surname>
                        </result>
                    </xsl:when>
                    <xsl:otherwise>
                        <result/>
                    </xsl:otherwise>
                </xsl:choose>

                <xsl:message dp:priority="notice" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> <xsl:value-of select="$client_id" /> time taken for access_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
            <!--**********************************************************************************************-->
            <!--** RESOURCE REQUEST type=resource_request                                                   **-->
            <!--** After an access token is verified but before the request is sent to the resource server  **-->
            <!--** the style-sheet can use the resource_request operation. This resource_request operation  **-->
            <!--** passes additional information to the resource server for processing.                     **-->
            <!--**                                                                                          **-->
            <!--** INPUT DATA                                                                               **-->
            <!--**  <input>                                                                                 **-->
            <!--**    <operation>resource_request</operation>                                               **-->
            <!--**    <container>                                                                           **-->
            <!--**      <identity>…</identity>                                                              **-->
            <!--**      <credentials>…</credentials>                                                        **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                                          **-->
            <!--**      <resource>…</resource>                                                              **-->
            <!--**      <mapped-resource>…</mapped-resource>                                                **-->
            <!--**      <approved/>                                                                         **-->
            <!--**      <message>…</message>                                                                **-->
            <!--**        …                                                                                 **-->
            <!--**    </container>                                                                          **-->
            <!--**  </input>                                                                                **-->
            <!--** This operation does not expect an output, and any output returned will be ignored by DP. **-->
            <!--** We may use this to set additional HTTP headers for the back-end application server. For  **-->
            <!--** instance, use the dp:set-request-header element to pass name of the resource owner to    **-->
            <!--** resource server or to the back-end                                                       **-->
            <!--**********************************************************************************************-->
            <xsl:when test="/input/operation/text()='resource_request'">
                <!--###############################################################################-->
                <!--## do something like request header manipulation etc.                        ##-->
                <!--###############################################################################-->
                <xsl:variable name="tid" select="dp:variable('var://service/transaction-id')" />
                <dp:set-http-request-header name="'X-Transaction-ID'" value="$tid" />
                <xsl:variable name="client" select="string(//child::entry[@type='oauth']/OAuthSupportedClient/client-id/text())"/>
                <dp:set-variable name="'var://context/CSRApp/client_id'" value="$client" />
                <xsl:variable name="miscinfo" select="//child::oauth-verified[@state='ok']/result/verified-access-token/miscinfo/text()" />

                <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> oauth client <xsl:value-of select="$client"/> misc info is <xsl:value-of select="$miscinfo" />*
                </xsl:message>
                <xsl:if test="contains($miscinfo,'username')">
                    <dp:set-http-request-header name="'X-UID-INFO'" value="$miscinfo" />
                </xsl:if>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for resource_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** VALIDATE TOKEN REQUEST type=validate_request                                     **-->
            <!--** DataPower provides a  way for OAuth clients to verify an access token in their   **-->
            <!--** possession using  the  grant type urn:ibm:datapower:validate  to  support this   **-->
            <!--** validation  request. The validate_request  extension point allows  you  to add   **-->
            <!--** additional information or perform additional processing  to the response after   **-->
            <!--** an access token has been verified successfully.                                  **-->
            <!--** INPUT DATA                                                                       **-->
            <!--** <input>                                                                          **-->
            <!--**   <operation>validate_request</operation>                                        **-->
            <!--**   <container>                                                                    **-->
            <!--**     <identity>…</identity>                                                       **-->
            <!--**     <credentials>…</credentials>                                                 **-->
            <!--**     <mapped-credentials>…</mapped-credentials>                                   **-->
            <!--**     <resource>…</resource>                                                       **-->
            <!--**     <mapped-resource>…</mapped-resource>                                         **-->
            <!--**     <approved/>                                                                  **-->
            <!--**     <message>…</message>                                                         **-->
            <!--**      …                                                                           **-->
            <!--**   </container>                                                                   **-->
            <!--** </input>                                                                         **-->
            <!--** After processing, the output contains a <result> node that contains the custom   **-->
            <!--** data from verifying the access token. Processing can return an empty node.       **-->
            <!--** <result>                                                                         **-->
            <!--**   <addinfo>…</addinfo>                                                           **-->
            <!--**     …                                                                            **-->
            <!--**   <times type='json:number'>text</times>                                         **-->
            <!--** </result>                                                                        **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation/text()='validate_request'">
                <dp:set-variable name="'var://context/oauth/type'" value="'validate_request'" />
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for validate_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** TOKEN REVOCATION REQUEST type=revoke_request                                     **-->
            <!--** This  is for handling token revocation  requests  by the  oauth client or  the   **-->
            <!--** resource owner. For a resource  owner, set the  revocation grant  type in  the   **-->
            <!--** request to revoke all the tokens that the resource owner issued to a  specific   **-->
            <!--** client. Define the following parameters  of a  resource owner revocation grant   **-->
            <!--** type:                                                                            **-->
            <!--** grant_type: urn:ibm:datapower:owner:revoke                                       **-->
            <!--** client_id: The client ID that indicates from which client the                    **-->
            <!--** resource owner requests to revoke all the tokens                                 **-->
            <!--**                                                                                  **-->
            <!--** For an OAuth client, set  the  revocation grant type in the request  to revoke   **-->
            <!--** specific access tokens or refresh tokens.; define the  following parameters of   **-->
            <!--** a client revocation grant                                                        **-->
            <!--** type:                                                                            **-->
            <!--** grant_type: urn:ibm:datapower:client:revoke                                      **-->
            <!--** client_id: The client ID as defined in the OAuth specification                   **-->
            <!--** Optional: client_secret: The client secret as defined in the                     **-->
            <!--** OAuth specification, when the client type is confidential and                    **-->
            <!--** the client uses client secret for authentication                                 **-->
            <!--** Optional: access_token: The access token to be revoked.                          **-->
            <!--** Optional: refresh_token: The refresh token to be revoked.                        **-->
            <!--**          INPUT DATA                                                              **-->
            <!--** <input>                                                                          **-->
            <!--**   <operation>revoke_request</operation>                                          **-->
            <!--**   <access_token ...>..</access_token>                                            **-->
            <!--**   <refresh_token ....>...</refresh_token>                                        **-->
            <!--**   <client_id ....>oauth-revoke-custom</client_id>                                **-->
            <!--**   <resource_owner>...</resource_owner>                                           **-->
            <!--**   <oauth-id type="client_revoke_request">.....</oauth-id>                        **-->
            <!--**   <OAuthSupportedClient>....</OAuthSupportedClient>                              **-->
            <!--** </input>                                                                         **-->
            <!--**          OUTPUT DATA                                                             **-->
            <!--** After processing, the output  contains one  or two <result> nodes that contain   **-->
            <!--** the custom data. Processing can return an empty node.                            **-->
            <!--** <result><status><success | failure/></result>                                    **-->
            <!--** <result><error>reason</error><error_description/></result>                       **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation/text()='revoke_request'">
                <!--###############################################################################-->
                <!--## get the embedded miscinfo from the access_token value if any which would  ##-->
                <!--## be prviously issued css token during access token generation              ##-->
                <!--###############################################################################-->
                <xsl:variable name="previous_css_token">
                    <xsl:value-of select="/input/container/identity/entry/oauth-verified[@state='ok']/result/verified-refresh-token/miscinfo/text()" />
                </xsl:variable>
                <!--** if previous css result is non-empty **-->
                <xsl:if test="$previous_css_token != ''">
                    <xsl:variable name="client_id" select="string(//child::entry[@type='oauth']/OAuthSupportedClient/client-id/text())" />

                    <!--###############################################################################-->
                    <!--## Get the css  authentication service  request parameters like  app id and  ##-->
                    <!--## app profile, app version,  optional description from the metadata.  Along ##-->
                    <!--## with these we will also grab the end-point and ssl-profile information.   ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="css_app_id" select="string($metadata/injection-parameters/css-authentication/app-id)" />
                    <xsl:variable name="css_app_profile" select="string($metadata/injection-parameters/css-authentication/app-profile)" />
                    <xsl:variable name="css_app_version" select="string($metadata/injection-parameters/css-authentication/version)" />
                    <xsl:variable name="params_description" select="string($metadata/injection-parameters/css-authentication/description)" />
                    <xsl:variable name="css_end_point" select="string($metadata/injection-parameters/css-authentication/end-point)" />
                    <xsl:variable name="ssl_profile" select="string($metadata/injection-parameters/css-authentication/ssl-profile)" />

                    <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> (<xsl:value-of select="$params_description" />) calling css token revocation at <xsl:value-of select="$css_end_point" /> with css token <xsl:value-of select="$previous_css_token" />*
                    </xsl:message>
                    <xsl:call-template name="expire-token">
                        <xsl:with-param name="appId" select="$css_app_id" />
                        <xsl:with-param name="token" select="$previous_css_token" />
                        <xsl:with-param name="source-ip" select="$client_ip" />
                        <xsl:with-param name="ssl-profile" select="$ssl_profile" />
                        <xsl:with-param name="reqHeaders" select="$httpHeaders" />
                        <xsl:with-param name="log-category" select="$dp-log-category" />
                        <xsl:with-param name="expire-token-url" select="$css_end_point" />
                    </xsl:call-template>
                </xsl:if>
                <result>
                    <status>success</status>
                </result>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for revoke_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** CHECK REVOCATOIN | type=check_revocation_request                                 **-->
            <!--** During the  OAuth or resource access  processing, DataPower will need  to verify **-->
            <!--** whether the  token (or  access) has  been revoked.  This operation  provides the **-->
            <!--** needed information for DataPower to proceed.  This operation is only called when **-->
            <!--** DataPower has verified  the token is valid,  and it has not been  revoked due to **-->
            <!--** reuse within the DataPower runtime cache.                                        **-->
            <!--** grant_type: urn:ibm:datapower:owner:revoke                                       **-->
            <!--** client_id: The client ID that indicates from which client the                    **-->
            <!--** resource owner requests to revoke all the tokens                                 **-->
            <!--**                                                                                  **-->
            <!--**          INPUT DATA                                                              **-->
            <!--**    <input>                                                                       **-->
            <!--**        <operation token-type="access_token|                                      **-->
            <!--**                               refresh_token|                                     **-->
            <!--**                               az-code|                                           **-->
            <!--**                               dp-state">check_revocation_request                 **-->
            <!--**        </operation>                                                              **-->
            <!--**        <token>....</token>                                                       **-->
            <!--**        <verified-token>                                                          **-->
            <!--**            <client_id>…</client_id>                                              **-->
            <!--**            <not_after>….</not_after>                                             **-->
            <!--**            <not_after_text>….</not_after_text>                                   **-->
            <!--**            <not_before>…</not_before>                                            **-->
            <!--**            <not_before_text>2014-08-08T08:08:08Z</not_before_text>               **-->
            <!--**            <resource_owner>xx</resource_owner>                                   **-->
            <!--**            <scope>xx</scope>                                                     **-->
            <!--**            <miscinfo>..</miscinfo>                                               **-->
            <!--**        </verified-token>                                                         **-->
            <!--**        <oauth-id type="...">.....</oauth-id>                                     **-->
            <!--**        <OAuthSupportedClient>...</OAuthSupportedClient>                          **-->
            <!--**    </input>                                                                      **-->
            <!--**                                                                                  **-->
            <!--** OUTPUT (if token is revoked)                                                     **-->
            <!--** <result><revoked/></result>                                                      **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation/text()='check_revocation_request'">
                <!--###############################################################################-->
                <!--## grab the css environment identifier based on the incoming host url        ##-->
                <!--###############################################################################-->
                <xsl:variable name="svc_description">
                    <xsl:value-of select="$metadata/injection-parameters/css-authentication/description/text()" />
                </xsl:variable>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> (<xsl:value-of select="$svc_description" />) <xsl:value-of select="/input/operation/text()" /> misc: <xsl:value-of select="//miscinfo" />*
                </xsl:message>
                <result>
                    <revoked/>
                </result>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for check_revocation_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** PREAPPROVED CHECK operation preapproved_check                                    **-->
            <!--** For authorization code and implicit grant types, an authorization form will be   **-->
            <!--** presented to  the resource owner for approving the client's request. DataPower   **-->
            <!--** supports  pre-approving or pre-denying  such  requests.  By marking whether  a   **-->
            <!--** request  has  been  pre-approved  or  pre-denied,  DataPower  will  skip   the   **-->
            <!--** authorization form presentation to the resource owner and proceed to the  next   **-->
            <!--** step in the OAuth process.                                                       **-->
            <!--** The  preapproved_check  extension  point  allows  you  to  short-circuit   the   **-->
            <!--** authorization grant process so that some requests can be  approved or  denied.   **-->
            <!--** These cases will  not be presented with  an authorization form when the client   **-->
            <!--** is trying to access the resource.                                                **-->
            <!--**                                                                                  **-->
            <!--**    INPUT DATA                                                                    **-->
            <!--** <input>                                                                          **-->
            <!--**   <operation>preapproved_check</operation>                                       **-->
            <!--**   <container>                                                                    **-->
            <!--**     ... same input for AAA – PostProcess Custom stylesheet ...                   **-->
            <!--**   </container>                                                                   **-->
            <!--** </input>                                                                         **-->
            <!--**                                                                                  **-->
            <!--** After processing, the output contains a <result> node that contains the result   **-->
            <!--** of the pre-approval. If the result is neither yes nor no, the authorization      **-->
            <!--** form is displayed. Returning an empty node will force the authorization form     **-->
            <!--** to be                                                                            **-->
            <!--** <result>                                                                         **-->
            <!--**    <approved>yes|no|nuknown</approved>                                           **-->
            <!--** </result>                                                                        **-->
            <!--**                                                                                  **-->
            <!--** yes: request has been pre-approved, the authorization form will not be presented **-->
            <!--** no: request has been pre-denied, the authorization form will not be presented.   **-->
            <!--** unknown: authorization form will be presented.                                   **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation[(@type='access_token') or
                                             (@type='refresh_token') or
                                             (@type='dp-state') or
                                             (@type='az-code')]/text()='preapproved_check'">
                <xsl:choose>
                    <xsl:when test="/input/container/credentials/entry[@type='oauth']/response_type/text() = 'code'">
                        <result>
                            <approved>unknown</approved>
                        </result>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:message dp:priority="warn" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> [preapproved_check: authorization form denied <xsl:value-of select="/input/container/credentials/entry[@type='oauth']/response_type/text()" />]*
                        </xsl:message>
                        <result>
                            <approved>yes</approved>
                        </result>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for preapproved_check <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** MISCELLANEOUS INFO CHECK operation miscinfo_request                              **-->
            <!--** This operation allows  the OAuth client to add miscellaneous  information to a   **-->
            <!--** token. The authorization server adds the response to  the token and returns it   **-->
            <!--** to  the OAuth client.  The maximum number of characters in this information is   **-->
            <!--** 512.                                                                             **-->
            <!--** INPUT DATA                                                                       **-->
            <!--**  <input>                                                                         **-->
            <!--**    <operation>@type='dp-state | az-code | access-token'>                         **-->
            <!--**      miscinfo_request                                                            **-->
            <!--**    </operation>                                                                  **-->
            <!--**    <container>                                                                   **-->
            <!--**      <identity>…</identity>                                                      **-->
            <!--**      <credentials>…</credentials>                                                **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                                  **-->
            <!--**      <resource>…</resource>                                                      **-->
            <!--**      <mapped-resource>…</mapped-resource>                                        **-->
            <!--**        …                                                                         **-->
            <!--**    </container>                                                                  **-->
            <!--**  </input>                                                                        **-->
            <!--**                                                                                  **-->
            <!--** After  processing, the  output  contains  a  <result> node  that contains  the   **-->
            <!--** response to the miscinfo request.  For example, if there is  a session that is   **-->
            <!--** persistent in a database somewhere,  you can use this field to store the index   **-->
            <!--** of the entry to the database. Processing can return an empty node.               **-->
            <!--**  <result>                                                                        **-->
            <!--**    <miscinfo>value</miscinfo>                                                    **-->
            <!--**  </result>                                                                       **-->
            <!--** If the  miscellaneous information  is added  during dp-state,  DataPower  will   **-->
            <!--** automatically carry the  value  forward to az-code and  access-token. However,   **-->
            <!--** you can override that information during @type=az-code,  or @type=access-token   **-->
            <!--** if needed. If the miscellaneous information is added during az-code, DataPower   **-->
            <!--** will automatically carry the value forward to access_token and  refresh_token,   **-->
            <!--** unless it is overridden later during @type=access-token.                         **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation[(@type='access-token') or (@type='dp-state') or (@type='az-code')]/text()='miscinfo_request'">
                <dp:set-variable name="'var://context/oauth/type'" value="'misc_request'" />
                <xsl:variable name="client_id" select="string(//child::entry[@type='oauth']/OAuthSupportedClient/client-id/text())" />

                <!--###############################################################################-->
                <!--## Get the css  authentication service  request parameters like  app id and  ##-->
                <!--## app profile, app version,  optional description from the metadata.  Along ##-->
                <!--## with these we will also grab the end-point and ssl-profile information.   ##-->
                <!--###############################################################################-->
                <xsl:variable name="css_app_id" select="string($metadata/injection-parameters/css-authentication/app-id)" />
                <xsl:variable name="css_app_profile" select="string($metadata/injection-parameters/css-authentication/app-profile)" />
                <xsl:variable name="css_app_version" select="string($metadata/injection-parameters/css-authentication/version)" />
                <xsl:variable name="params_description" select="string($metadata/injection-parameters/css-authentication/description)" />
                <xsl:variable name="css_end_point" select="string($metadata/injection-parameters/css-authentication/end-point)" />
                <xsl:variable name="ssl_profile" select="string($metadata/injection-parameters/css-authentication/ssl-profile)" />

                <!--###############################################################################-->
                <!--## get the actual grant type for request under the miscinfo processing stage ##-->
                <!--###############################################################################-->
                <xsl:variable name="request_grant_type">
                    <xsl:value-of select="/input/container/identity/entry/oauth-id[@type='access_request']/grant_type/text()" />
                </xsl:variable>

                <!--********************************************************************-->
                <!--** CSS TOKEN HANDLING SECTION (START)                             **-->
                <!--********************************************************************-->
                <xsl:variable name="cssToken">
                    <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> (<xsl:value-of select="$params_description" />) calling anonymous css session at <xsl:value-of select="$css_end_point" /> with appid <xsl:value-of select="$css_app_id" /> and profile <xsl:value-of select="$css_app_profile" />*
                    </xsl:message>
                    <xsl:call-template name="css-token">
                        <xsl:with-param name="appId" select="$css_app_id" />
                        <xsl:with-param name="appProfile" select="$css_app_profile" />
                        <xsl:with-param name="sourceIp" select="$client_ip" />
                        <xsl:with-param name="appVersion" select="$css_app_version" />
                        <xsl:with-param name="sslProfile" select="$ssl_profile" />
                        <xsl:with-param name="reqHeaders" select="$httpHeaders" />
                        <xsl:with-param name="logCategory" select="$dp-log-category" />
                        <xsl:with-param name="cssTokenUrl" select="$css_end_point" />
                    </xsl:call-template>
                </xsl:variable>
                <!--********************************************************************-->
                <!--** CSS TOKEN HANDLING SECTION (END)                               **-->
                <!--********************************************************************-->

                <xsl:variable name="css-token">
                    <xsl:choose>
                        <xsl:when test="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/CallAuthenticationOperationResult/text()='Success'">
                            <xsl:value-of select="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/UseToken/text()" />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:message dp:priority="error" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> (<xsl:value-of select="$params_description" />) token generation failure <xsl:value-of select="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/ExceptionMessage/text()" />*
                            </xsl:message>
                            <xsl:value-of select="concat('css_error',' ', $cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/ExceptionMessage/text())" />
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>

                <dp:set-variable name="'var://context/CSRApp/cssTokenResponse'" value="$css-token" />

                <result>
                    <xsl:choose>
                        <xsl:when test="contains($css-token,'error')">
                            <dp:set-variable name="'var://context/CSRApp/misc-result'" value="'false'" />
                            <xsl:message dp:priority="error" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> (<xsl:value-of select="$params_description" />) token <xsl:value-of select="$css-token" /> with error <xsl:value-of select="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/ExceptionMessage/text()" />*
                            </xsl:message>
                            <miscinfo/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:variable name="css-session" select="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/SessionToken/text()" />
                            <dp:set-variable name="'var://context/CSRApp/css-token'" value="string($css-token)" />
                            <dp:set-variable name="'var://context/CSRApp/css-session'" value="string($css-session)" />
                            <dp:set-variable name="'var://context/CSRApp/misc-result'" value="'true'" />

                            <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> (<xsl:value-of select="$params_description" />) token generated: <xsl:value-of select="$css-token" /> successfully*
                            </xsl:message>

                            <!--###############################################################################-->
                            <!--## http request headers for agent profile service calls                      ##-->
                            <!--###############################################################################-->
                            <xsl:variable name="profileHeaders">
                                <header name="Content-Type">application/json</header>
                                <header name="Authorization"><xsl:value-of select="string($css-token)"/></header>
                            </xsl:variable>

                            <xsl:call-template name="getAgentProfile">
                                <xsl:with-param name="aaa" select="dp:variable('var://context/CSRApp/AAA')"/>
                                <xsl:with-param name="agentSine" select="dp:variable('var://context/CSRApp/AgentSine')"/>
                                <xsl:with-param name="dutyCode" select="dp:variable('var://context/CSRApp/DutyCode')"/>
                                <xsl:with-param name="sineNumber" select="dp:variable('var://context/CSRApp/SineNumber')"/>
                                <xsl:with-param name="sslProfile" select="string($metadata/injection-parameters/sine-table/ssl-profile/text())"/>
                                <xsl:with-param name="reqHeaders" select="$profileHeaders"/>
                                <xsl:with-param name="logCategory" select="$dp-log-category" />
                                <xsl:with-param name="profileUrl" select="string($metadata/injection-parameters/sine-table/end-point/text())"/>
                            </xsl:call-template>

                            <xsl:variable name="sslp">
                                <xsl:variable name="temp" select="$metadata/injection-parameters/sine-table/ssl-profile"/>
                                <xsl:choose>
                                    <xsl:when test="starts-with($temp,'client:')">
                                        <xsl:value-of select="substring-after($temp,'client:')"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="$temp"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>

                            <xsl:call-template name="jsGetAgentProfile">
                                <xsl:with-param name="sslProfile" select="string($sslp)"/>
                                <xsl:with-param name="anonymousToken" select="string($css-token)"/>
                                <xsl:with-param name="logCategory" select="$dp-log-category"/>
                                <xsl:with-param name="profileUrl" select="string($metadata/injection-parameters/sine-table/end-point/text())"/>
                                <xsl:with-param name="contentType" select="'application/json'"/>
                                <xsl:with-param name="profileRequest" select="string(dp:variable('var://context/CSRApp/GetAgentProfile'))"/>
                                <xsl:with-param name="gwscript" select="$gw_script"/>
                            </xsl:call-template>

                            <xsl:variable name="get_agent_profile_status" select="dp:variable('var://context/CSRApp/get_agent_profile_status')"/>
                            <xsl:variable name="misc_data" select="dp:variable('var://context/CSRApp/agent_profile_name')"/>
                            <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> agent profile request status is <xsl:value-of select="$get_agent_profile_status" /> and data <xsl:value-of select="$misc_data"/>*
                            </xsl:message>
                            <xsl:if test="$get_agent_profile_status='true'">
                                <miscinfo>
                                    <xsl:value-of select="$misc_data"/>
                                </miscinfo>
                            </xsl:if>
                        </xsl:otherwise>
                    </xsl:choose>
                </result>

                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for miscinfo_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
            <!--****************************************************************************-->
            <!--** AUTHORIZATION REQUEST operation is authorization_request               **-->
            <!--** This is invoked after an  authorization code is generated successfully **-->
            <!--** (as  in  an  authorization  code grant  type).  It  allows  additional **-->
            <!--** information  to  be  returned  to  the OAuth  client  along  with  the **-->
            <!--** authorization code;  the processing  returns a  node set  that becomes **-->
            <!--** part of  the query string  which is sent to  the client with  HTTP 302 **-->
            <!--** redirect                                                               **-->
            <!--**                                                                        **-->
            <!--**  HTTP/1.1 302 Processed                                                **-->
            <!--**  Location: https://{client-hostname-redirect-url}?                     **-->
            <!--**      code=........&state=........                                      **-->
            <!--**                                                                        **-->
            <!--**  <input>                                                               **-->
            <!--**    <operation>authorization_request</operation>                        **-->
            <!--**    <container>                                                         **-->
            <!--**      <identity>…</identity>                                            **-->
            <!--**      <credentials>…</credentials>                                      **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                        **-->
            <!--**      <resource>…</resource>                                            **-->
            <!--**      <mapped-resource>…</mapped-resource>                              **-->
            <!--**        …                                                               **-->
            <!--**    </container>                                                        **-->
            <!--**  </input>                                                              **-->
            <!--**                                                                        **-->
            <!--**  After processing, the output contains a <result> node that contains   **-->
            <!--**  the custom data. Processing can return an empty node.                 **-->
            <!--**  <result>                                                              **-->
            <!--**    <customdata>value</customdata>                                      **-->
            <!--**    <customdata>value</customdata>                                      **-->
            <!--**  </result>                                                             **-->
            <!--****************************************************************************-->
            <xsl:when test="/input/operation/text()='authorization_request'">
                <dp:set-variable name="'var://context/oauth/type'" value="'authorization_request'" />
                <result/>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for authorization_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
            <!--**********************************************************************************************-->
            <!--** AUTHORIZATION FORM operation authorization_form                                          **-->
            <!--** For authorization code and implicit grant types, the resource owner will be presented    **-->
            <!--** with an authorization form in which the resource owner can grant access to the requested **-->
            <!--** resources by the OAuth client. By default, DataPower allows the resource owner to grant  **-->
            <!--** only a subset of the requested scope by the client. After selecting the scope from the   **-->
            <!--** authorization form, the resource owner uses the authorization form operation to handle   **-->
            <!--** the selected scope. This operation applies to authorization code grant type and implicit **-->
            <!--** grant type.                                                                              **-->
            <!--**                                                                                          **-->
            <!--**  INPUT DATA                                                                              **-->
            <!--**  <input>                                                                                 **-->
            <!--**    <operation>authorization_form</operation>                                             **-->
            <!--**    <container>                                                                           **-->
            <!--**      <identity>…</identity>                                                              **-->
            <!--**      <credentials>…</credentials>                                                        **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                                          **-->
            <!--**      <resource>…</resource>                                                              **-->
            <!--**      <mapped-resource>…</mapped-resource>                                                **-->
            <!--**        …                                                                                 **-->
            <!--**    </container>                                                                          **-->
            <!--**  </input>                                                                                **-->
            <!--**                                                                                          **-->
            <!--**  After processing, the output contains a <result><scope></scope></result> node that      **-->
            <!--**  contains the custom data. Processing can return an empty node.                          **-->
            <!--**  <result>                                                                                **-->
            <!--**    <scope>scope selected by resource owner space deliminated</scope>                     **-->
            <!--**  </result>                                                                               **-->
            <!--**********************************************************************************************-->
            <xsl:when test="/input/operation/text()='authorization_form'">
                <result/>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*
                    <xsl:value-of select="$lp" /> time taken for authorization_form request
                    <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time" /> ms*
                </xsl:message>
            </xsl:when>
        </xsl:choose>
    </xsl:template>

    <!--###############################################################################-->
    <!-- Identity Template                                                             -->
    <!--###############################################################################-->
    <xsl:template match="attribute-value">
        <xsl:copy-of select="." />
    </xsl:template>

    <!--###############################################################################-->
    <!--## named template for acquiring css user token                               ##-->
    <!--###############################################################################-->
    <xsl:template name="css-token">
        <xsl:param name="appId" />
        <xsl:param name="appProfile" />
        <xsl:param name="sourceIp" />
        <xsl:param name="appVersion" />
        <xsl:param name="sslProfile" />
        <xsl:param name="reqHeaders" />
        <xsl:param name="logCategory" />
        <xsl:param name="cssTokenUrl" />
        <xsl:variable name="cssTokenRequest">
			<anonymousSessionRequest><application><xsl:value-of select="$appId"/></application>
				<applicationProfile><xsl:value-of select="$appProfile"/></applicationProfile>
				<transaction />
				<session/>
				<metadata />
				<source><xsl:value-of select="$sourceIp"/></source>
				<version><xsl:value-of select="$appVersion"/></version>
			</anonymousSessionRequest>
        </xsl:variable>
        <xsl:message dp:priority="info" dp:type="{$logCategory}">*css-token template acquire session for appid <xsl:value-of select="$appId" /> <xsl:value-of select="$sslProfile" />@<xsl:value-of select="$cssTokenUrl" />*
        </xsl:message>
        <xsl:variable name="cssTokenResponse">
            <dp:url-open target="{$cssTokenUrl}"
                         ssl-proxy="{$sslProfile}"
                         timeout="30"
                         response="responsecode"
                         http-headers="$reqHeaders/*"
                         http-method="post">
                <xsl:copy-of select="$cssTokenRequest" />
            </dp:url-open>
        </xsl:variable>
        <xsl:copy-of select="$cssTokenResponse" />
    </xsl:template>

    <!--###############################################################################-->
    <!--## named template for revoking/expiring css token or signing out             ##-->
    <!--###############################################################################-->
    <xsl:template name="expire-token">
        <xsl:param name="appId" />
        <xsl:param name="token" />
        <xsl:param name="source-ip" />
        <xsl:param name="ssl-profile" />
        <xsl:param name="reqHeaders" />
        <xsl:param name="log-category" />
        <xsl:param name="expire-token-url" />
        <xsl:variable name="expire-token-request">
            <signOutSessionRequest><application><xsl:value-of select="$appId" /></application>
                <token><xsl:value-of select="$token" /></token>
                <source><xsl:value-of select="$source-ip" /></source>
            </signOutSessionRequest>
        </xsl:variable>
        <xsl:message dp:priority="info" dp:type="{$log-category}">*<xsl:value-of select="$lp" /> css expiry call invoked for appid: <xsl:value-of select="$appId" />*
        </xsl:message>
        <xsl:variable name="expire-token-response">
            <dp:url-open target="{$expire-token-url}"
                         ssl-proxy="{$ssl-profile}"
                         timeout="30"
                         response="responsecode"
                         http-headers="$reqHeaders/*"
                         http-method="post">
                <xsl:copy-of select="$expire-token-request" />
            </dp:url-open>
        </xsl:variable>
        <xsl:variable name="signout-response">
            <xsl:value-of select="$expire-token-response/url-open/response/SignOutSessionCallWrapper/SignOutSessionOperationResult/text()" />
        </xsl:variable>
        <xsl:message dp:priority="info" dp:type="{$log-category}">*<xsl:value-of select="$lp" /> css token <xsl:value-of select="$token" /> expiry call: <xsl:value-of select="$signout-response" />*
        </xsl:message>
        <xsl:copy-of select="$expire-token-response" />
    </xsl:template>

    <!--###############################################################################-->
    <!--## named template for processing a list                                      ##-->
    <!--###############################################################################-->
    <xsl:template name="proecessList">
        <xsl:param name="array"/>
        <xsl:text>{</xsl:text>
            <xsl:for-each select="exslt:node-set($array)//item">
                    <xsl:value-of select="."/>
            </xsl:for-each>
        <xsl:text>}</xsl:text>
    </xsl:template>

    <!--###############################################################################-->
    <!--## named template for processing a map                                       ##-->
    <!--###############################################################################-->
    <xsl:template name="processMap">
        <xsl:param name="entries"/>
        <xsl:text>{</xsl:text>
            <xsl:for-each select="exslt:node-set($entries)//mapEntry">
                <xsl:text>"</xsl:text>
                <xsl:value-of select="name"/>
                <xsl:text>":"</xsl:text>
                <xsl:value-of select="value"/>
                <xsl:text>"</xsl:text>
                <xsl:choose>
                    <xsl:when test="position() = last()" />
                    <xsl:otherwise>
                        <xsl:text>,</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        <xsl:text>}</xsl:text>
    </xsl:template>

    <!--###############################################################################-->
    <!--## named template for acquiring AgentProfile using user token                ##-->
    <!--###############################################################################-->
    <xsl:template name="getAgentProfile">
        <xsl:param name="aaa" />
        <xsl:param name="agentSine" />
        <xsl:param name="dutyCode" />
        <xsl:param name="sineNumber" />
        <xsl:param name="sslProfile" />
        <xsl:param name="reqHeaders" />
        <xsl:param name="logCategory" />
        <xsl:param name="profileUrl" />
        <xsl:variable name="map">
            <map>
                <mapEntry><name>AAA</name><value><xsl:value-of select="$aaa"/></value></mapEntry>
                <mapEntry><name>AgentSine</name><value><xsl:value-of select="$agentSine"/></value></mapEntry>
                <mapEntry><name>DutyCode</name><value><xsl:value-of select="$dutyCode"/></value></mapEntry>
                <mapEntry><name>SineNumber</name><value><xsl:value-of select="$sineNumber"/></value></mapEntry>
            </map>
        </xsl:variable>
        <xsl:variable name="profileRequest">
            <xsl:call-template name="processMap">
                <xsl:with-param name="entries" select="$map"/>
            </xsl:call-template>
        </xsl:variable>
        <dp:set-variable name="'var://context/CSRApp/GetAgentProfile'" value="string($profileRequest)"/>
        <xsl:message dp:priority="info" dp:type="{$logCategory}">*getAgentProfile template request <xsl:copy-of select="$profileRequest" />*
        </xsl:message>
        <!--
        <xsl:variable name="profileResponse">
            <dp:url-open target="{$profileUrl}"
                         ssl-proxy="{$sslProfile}"
                         timeout="30"
                         response="responsecode"
                         http-headers="$reqHeaders/*"
                         http-method="post">
                <xsl:copy-of select="$profileRequest" />
            </dp:url-open>
        </xsl:variable>
        <dp:set-variable name="'var://context/CSRApp/GetAgentProfileResponse'" value="string($profileResponse)"/>
        <xsl:message dp:priority="info" dp:type="{$logCategory}">*getAgentProfile template response <xsl:copy-of select="$profileResponse" />*
        </xsl:message>
        -->
    </xsl:template>

    <!--############################################################################-->
    <!--## Template for handling the profile service through javascript           ##-->
    <!--############################################################################-->
    <xsl:template name="jsGetAgentProfile">
        <xsl:param name="sslProfile" />
        <xsl:param name="anonymousToken" />
        <xsl:param name="logCategory" />
        <xsl:param name="profileUrl" />
        <xsl:param name="contentType" />
        <xsl:param name="profileRequest" />
        <xsl:param name="gwscript" />
        <!--****************************************************************************-->
        <!--** Formulate  a  parameterized  value   stub  for  invoking  the  backend **-->
        <!--** javascript file which in turn will  make an implicit call to the token **-->
        <!--** introspection (validation)  end-point. The value  stub is sent  to the **-->
        <!--** javascript as input  parameters which the javascript will  use to make **-->
        <!--** the introspection  call. After invoking  the service, the  results are **-->
        <!--** all stored  as context variables which  will be used in  the predicate **-->
        <!--** checking phases.                                                       **-->
        <!--****************************************************************************-->
        <xsl:variable name="jsParams">
            <parameter name="getAgentProfileSvcUrl">
                <xsl:value-of select="$profileUrl" />
            </parameter>
            <parameter name="sslclient">
                <xsl:value-of select="$sslProfile" />
            </parameter>
            <parameter name="content_type">
                <xsl:value-of select="$contentType" />
            </parameter>
            <parameter name="css_token">
                <xsl:value-of select="$anonymousToken" />
            </parameter>
            <parameter name="lc">
                <xsl:value-of select="$logCategory" />
            </parameter>
            <parameter name="profile_request">
                <xsl:value-of select="$profileRequest" />
            </parameter>
        </xsl:variable>
        <xsl:message dp:priority="info" dp:type="{$logCategory}">*(<xsl:value-of select="$gwscript"/>) calling <xsl:value-of select="$profileUrl"/> for profile service request <xsl:value-of select="$profileRequest"/>*
        </xsl:message>
        <!--****************************************************************************-->
        <!--** Trigger  the  datapower javascript  from  within  the xslt  using  the **-->
        <!--** standard  dp api  function dp:gatewayscript.  This function  will read **-->
        <!--** input parameters from the above jsParams stub.                         **-->
        <!--****************************************************************************-->
        <xsl:variable name="get_agent_profile">
            <xsl:value-of select="dp:gatewayscript($gwscript, ., true(), $jsParams)" />
        </xsl:variable>
        <xsl:message dp:priority="debug" dp:type="{$logCategory}">*[GetAgentProfile <xsl:value-of select="string($get_agent_profile)"/>]*</xsl:message>
        <dp:set-variable name="'var://context/CSRApp/jsGetAgentProfile'" value="$get_agent_profile"/>
    </xsl:template>

    <!--###############################################################################-->
    <!--## a named template for validating the uuid value                            ##-->
    <!--###############################################################################-->
    <xsl:template name="uuid-validate">
        <xsl:param name="uuid" />
        <xsl:variable name="uuid-length" select="string-length($uuid)" />
        <xsl:variable name="uuid-dashes">
            <xsl:value-of select="string-length($uuid) - string-length(translate($uuid,'-',''))" />
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="(($uuid-length = 36) and ($uuid-dashes = 4))">
                <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>false</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>
