<?xml version="1.0" encoding="utf-8"?>
<!--#===============================================================================================================#-->
<!--#  Property of United Airlines                                                                                  #-->
<!--#  Copyright (c) United Airlines., 2017 All Rights Reserved.                                                    #-->
<!--#                                                                                                               #-->
<!--#  File                 :      AddOnOAuthProcessing.xsl                                                         #-->
<!--#  Author               :      Sampath Singamsetty, Eruventi Venkat Ramana (Middleware Engineering)             #-->
<!--#  Contact              :      Raj Damera, MW Engg for any changes or amendments                                #-->
<!--#  Current Version      :      $$ 15.0 (validation pattern changed for css token extension/revocation)                                #-->
<!--#  Description          :      This transformation will do some custom processing of the authenticated oauth    #-->
<!--#                              data during various oauth phases as described in the documentation. Refer to the #-->
<!--#                              individuak doc strings and comments for more details                             #-->
<!--#                                                                                                               #-->
<!--#  Documentation        :      https://www.ibm.com/support/knowledgecenter/SS9H2Y_7.5.0                         #-->
<!--#                                       /com.ibm.dp.doc/aaa_oauthsupport.html                                   #-->
<!--#                                                                                                               #-->
<!--#  Revision History     :      $$ v5 updates (jwt token lifetime made same as the oauth client's)               #-->
<!--#                              $$ v7 updates                                                                    #-->
<!--#                              call css based on the session node true or false                                 #-->
<!--#                              take session id and include it as jti jwt token                                  #-->
<!--#                              $$ v8 updates (handle css refresh and revoke)                                    #-->
<!--#                              $$ v9 updates (handle explicit userType attribut sent by the user)               #-->
<!--#                              $$ v10 updates (handle css failures and errors)                                  #-->
<!--#                              $$ v11 updates                                                                   #-->
<!--#                              handling the issuer-url from individual css environment section and also removed #-->
<!--#                              the relative xpath of child:: wherever possible                                  #-->
<!--#                              $$ v12 updates (commented out the misc nullify, altered context variables)       #-->
<!--#                              $$ v13 updates (minor updates with respect to variable invocation)               #-->
<!--#                              $$ v14 updates (included a template for uuid validation)                         #-->
<!--#===============================================================================================================#-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                              xmlns:dp="http://www.datapower.com/extensions"
                              xmlns:dpconfig="http://www.datapower.com/param/config"
                              xmlns:dpfunc="http://www.datapower.com/extensions/functions"
                              xmlns:dpquery="http://www.datapower.com/param/query"
                              xmlns:json="http://www.ibm.com/xmlns/prod/2009/jsonx"
                              xmlns:xs="http://www.w3.org/2001/XMLSchema"
                              xmlns:fn="http://www.w3.org/2005/xpath-functions"
                              extension-element-prefixes="json dp dpfunc xs fn dpconfig dpquery xsl"
                              exclude-result-prefixes="json dp dpfunc dpconfig fn dpquery xs">
    <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes" omit-xml-declaration="yes" />

    <!--###############################################################################-->
    <!--## get the initial time of transaction from the real-time dp data            ##-->
    <!--###############################################################################-->
    <xsl:variable name="init_time">
        <xsl:value-of select="dp:variable('var://service/time-elapsed')"/>
    </xsl:variable>

    <!--###############################################################################-->
    <!--## http request headers for convertors and service calls                     ##-->
    <!--###############################################################################-->
    <xsl:param name="httpHeaders">
        <header name="Content-Type">text/xml</header>
    </xsl:param>

    <!--###############################################################################-->
    <!--## ldap credential entry information from appropriate AAA action             ##-->
    <!--###############################################################################-->
    <xsl:param name="credentials" select="//child::container/credentials/entry[@type='ldap']/text()" />

    <!--###############################################################################-->
    <!--## get the oid basic and css application profile information                 ##-->
    <!--## The static xml file will maintain information like css service url's,     ##-->
    <!--## a valid ssl profile for tls connectivity, static application profiles     ##-->
    <!--## specifically created for each user category                               ##-->
    <!--###############################################################################-->
    <xsl:param name="location" select="'local:///OpenID/conf/'" />
    <xsl:param name="opi-metadata" select="'opi-metadata.xml'" />
    <xsl:param name="openid-metadata" select="concat($location, $opi-metadata)" />

    <!--###############################################################################-->
    <!--## set context variables for jwt id metadata from the config file            ##-->
    <!--###############################################################################-->
    <xsl:param name="metadata">
        <xsl:copy-of select="document($openid-metadata)" />
    </xsl:param>

    <!--###############################################################################-->
    <!--## Datapower Log Category for logging the information to a static log file   ##-->
    <!--## Ensure that this category is created                                      ##-->
    <!--###############################################################################-->
    <xsl:param name="dp-log-category">
        <xsl:variable name="log_temp" select="dp:variable('var://context/oauth/dpLogCategory')"/>
        <xsl:choose>
            <xsl:when test="$log_temp != ''">
                <xsl:value-of select="$log_temp"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="string($metadata/security-metadata/oid/gateway/log-category/text())"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:param>

    <!--###############################################################################-->
    <!--## set logger statement prefix for identifying the events.                   ##-->
    <!--###############################################################################-->
    <xsl:param name="lp" select="'OpenId (AddOnOAuthProcessing)'" />

    <!--###############################################################################-->
    <!--## get the css identifier for deciding which css environment to pick         ##-->
    <!--###############################################################################-->
    <xsl:param name="css-id" select="dp:http-request-header('Host')" />

    <!--###############################################################################-->
    <!--## get the user type information from the pre-defined context variable which ##-->
    <!--## which is set by the tokenProcessing.js gatewayscript which is the main    ##-->
    <!--## request processing broker for the entire OpenID Connect Framework         ##-->
    <!--## As per United's requirement, the user can be classified into 4 categories ##-->
    <!--## 1. Guest (Anonymous or localUser)                                         ##-->
    <!--## 2. Employee (Authenticated User)                                          ##-->
    <!--## 3. Customer ((Authenticated User)                                         ##-->
    <!--## 4. External ((????)                                                       ##-->
    <!--###############################################################################-->
    <xsl:param name="userType" select="dp:variable('var://context/oauth/dpUserType')" />

    <xsl:template match="/">
        <xsl:choose>
            <!--******************************************************************************-->
            <!--** ACCESS TOKEN REQUEST type=access_request                                 **-->
            <!--** After successfully generating an access token, processing returns a node **-->
            <!--** set that becomes part of the JSON object that contains the access token. **-->
            <!--**  INPUT DATA                                                              **-->
            <!--**  <input>                                                                 **-->
            <!--**    <operation>access_request</operation>                                 **-->
            <!--**    <result>                                                              **-->
            <!--**      <access_token>…</access_token>                                      **-->
            <!--**      <expires_in type="json:number">…</expires_in>                       **-->
            <!--**      <scope>…</scope>                                                    **-->
            <!--**    </result>                                                             **-->
            <!--**    <container>                                                           **-->
            <!--**      <identity>…</identity>                                              **-->
            <!--**      <credentials>…</credentials>                                        **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                          **-->
            <!--**      <resource>…</resource>                                              **-->
            <!--**      <mapped-resource>…</mapped-resource>                                **-->
            <!--**      <approved/>                                                         **-->
            <!--**      <message>…</message>                                                **-->
            <!--**       …                                                                  **-->
            <!--**    </container>                                                          **-->
            <!--**  </input>                                                                **-->
            <!--** After processing, the output contains a <result> node that contains the  **-->
            <!--** custom data. Processing can return an empty node.                        **-->
            <!--**  <result>                                                                **-->
            <!--**    <custom_data>…</custom_data>                                          **-->
            <!--**      …                                                                   **-->
            <!--**    <custom_sum type="json:number">…</custom_sum>                         **-->
            <!--**  </result>                                                               **-->
            <!--** For all the supported grant types, at the end of a successful a oauth    **-->
            <!--** handshake, an access token will be returned in a JSON object or as part  **-->
            <!--** of the redirect URI                                                      **-->
            <!--******************************************************************************-->
            <xsl:when test="/input/operation/text()='access_request'">
                <dp:set-variable name="'var://context/oauth/type'" value="'access_request'" />
                <!--###############################################################################-->
                <!--## get the oauth client identifier from the incoming request payload     ##-->
                <!--###############################################################################-->
                <xsl:variable name="client_id" select="string(dp:variable('var://context/oauth/client_id'))" />
                <!--###############################################################################-->
                <!--## get the token expiry time from the OAuth Client Profile to be used by jwt ##-->
                <!--## first check if the oauth client has a valid lifetime and pick it if not   ##-->
                <!--## pick the expiry value from xml repository as a fallback step              ##-->
                <!--###############################################################################-->
                <xsl:variable name="expiry">
                    <xsl:choose>
                        <xsl:when test="//OAuthSupportedClient/access-token-lifetime/text()!=''">
                            <xsl:value-of select="//OAuthSupportedClient/access-token-lifetime/text()" />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$metadata/security-metadata/oid/jwt-token-lifetime/text()" />
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> <xsl:value-of select="$client_id"/> setting jwt token lifetime value as: <xsl:value-of select="floor($expiry div 60)" /> minutes from oauth metadata*
                </xsl:message>
                <!--###############################################################################-->
                <!--## set context variables for iss, ver, expiry and client-id for carry over   ##-->
                <!--###############################################################################-->
                <dp:set-variable name="'var://context/oauth/issuer'" value="string($metadata/security-metadata/css/environment[@id=$css-id]/issuer-url/text())" />
                <dp:set-variable name="'var://context/oauth/version'" value="string($metadata/security-metadata/oid/version/text())" />
                <dp:set-variable name="'var://context/oauth/id-token-lifetime'" value="string(floor($expiry div 60))" />
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> <xsl:value-of select="$client_id" /> metadata <xsl:value-of select="$openid-metadata" />*
                </xsl:message>
                <!--###############################################################################-->
                <!--## get the user input scope from the request meta-data                       ##-->
                <!--###############################################################################-->
                <xsl:variable name="input-scope" select="input/result/scope/text()" />
                <!--###############################################################################-->
                <!--## check if the ldap auxiliary data is present after a successful search     ##-->
                <!--###############################################################################-->
                <xsl:if test="dp:variable('var://context/ldap/auxiliary-attributes')">
                    <!--###############################################################################-->
                    <!--## populate the LDAP Attributes For Querying the Employee data from AD       ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="ldap-lookup-attributes">
                        <scope>
                            <param>employeeID</param>
                            <param>displayName</param>
                            <param>givenName</param>
                            <param>sn</param>
                            <param>EmployeeStatus</param>
                            <param>company</param>
                            <param>department</param>
                            <param>mail</param>
                            <param>ualCostCenterDesc</param>
                            <param>ualDepartment</param>
                            <param>ualJobCodeDesc</param>
                            <param>ualJobGroup</param>
                            <param>ualRegTemp</param>
                            <param>ualDivisionCode</param>
                            <param>manager</param>
                            <param>ualManagerLevel</param>
                            <param>telephoneNumber</param>
                            <param>ualEmployeeGroup</param>
                            <param>ualCostCenter</param>
                            <param>ualCostCenterDesc</param>
                            <param>ualBenefitStatus</param>
                            <param>physicalDeliveryOfficeName</param>
                            <param>title</param>
                            <param>JobCode</param>
                        </scope>
                    </xsl:variable>
                    <!--###############################################################################-->
                    <!--## Grab the LDAP Auxilliary Attributes Information data                      ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="ldapAttributeNode">
                        <xsl:if test="/input/operation/text()='access_request'">
                            <xsl:copy-of select="dp:variable('var://context/ldap/auxiliary-attributes')" />
                        </xsl:if>
                    </xsl:variable>
                    <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> <xsl:value-of select="$client_id"/> ldap_lookup_attributes: <xsl:copy-of select="$ldap-lookup-attributes" />*
                    </xsl:message>
                    <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> <xsl:value-of select="$client_id"/> identity data: <xsl:copy-of select="$ldapAttributeNode/result[DN=$credentials]/DN" /> //
                        <xsl:copy-of select="$ldapAttributeNode/result[DN=$credentials]/attribute-value[(@name=$ldap-lookup-attributes/scope/param)]" />*
                    </xsl:message>
                    <xsl:variable name="response">
                        <xsl:apply-templates select="$ldapAttributeNode/result[DN=$credentials]/attribute-value[(@name=$ldap-lookup-attributes/scope/param)]" />
                    </xsl:variable>
                    <xsl:variable name="user-data">
                        <input>
                          <xsl:copy-of select="$ldapAttributeNode/result[DN=$credentials]/DN" />
                          <xsl:for-each select="$response/attribute-value">
                            <!-- TODO COMMENTED THE LOG TO REMOVE VERBOSITY
                            <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> <xsl:value-of select="$client_id"/> for each :<xsl:value-of select="." />*
                            </xsl:message>
                            -->
                            <xsl:element name="{@name}">
                              <xsl:value-of select="." />
                            </xsl:element>
                          </xsl:for-each>
                        </input>
                    </xsl:variable>
                    <dp:set-variable name="'var://context/oauth/auxiliary-attributes'" value="$user-data" />
                </xsl:if>
                <result/>
                <xsl:message dp:priority="notice" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> <xsl:value-of select="$client_id"/> time taken for access_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
            <!--**********************************************************************************************-->
            <!--** RESOURCE REQUEST type=resource_request                                                   **-->
            <!--** After an access token is verified but before the request is sent to the resource server  **-->
            <!--** the style-sheet can use the resource_request operation. This resource_request operation  **-->
            <!--** passes additional information to the resource server for processing.                     **-->
            <!--**                                                                                          **-->
            <!--** INPUT DATA                                                                               **-->
            <!--**  <input>                                                                                 **-->
            <!--**    <operation>resource_request</operation>                                               **-->
            <!--**    <container>                                                                           **-->
            <!--**      <identity>…</identity>                                                              **-->
            <!--**      <credentials>…</credentials>                                                        **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                                          **-->
            <!--**      <resource>…</resource>                                                              **-->
            <!--**      <mapped-resource>…</mapped-resource>                                                **-->
            <!--**      <approved/>                                                                         **-->
            <!--**      <message>…</message>                                                                **-->
            <!--**        …                                                                                 **-->
            <!--**    </container>                                                                          **-->
            <!--**  </input>                                                                                **-->
            <!--** This operation does not expect an output, and any output returned will be ignored by DP. **-->
            <!--** We may use this to set additional HTTP headers for the back-end application server. For  **-->
            <!--** instance, use the dp:set-request-header element to pass name of the resource owner to    **-->
            <!--** resource server or to the back-end                                                       **-->
            <!--**********************************************************************************************-->
            <xsl:when test="/input/operation/text()='resource_request'">
                <!--###############################################################################-->
                <!--## do something like request header manipulation etc.                        ##-->
                <!--###############################################################################-->
                <xsl:variable name="tid" select="dp:variable('var://service/transaction-id')"/>
                <dp:set-http-request-header name="'X-Transaction-ID'" value="$tid" />
                <dp:set-variable name="'var://context/oauth/client_id'" value="string(//child::entry[@type='oauth']/OAuthSupportedClient/client-id/text())" />
                <xsl:variable name="misc_css_token" select="//child::oauth-verified[@state='ok']/result/verified-access-token/miscinfo/text()" />
                <xsl:variable name="jti" select="string(dp:variable('var://context/ctx/jwt_jti_value'))"/>
                <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> oauth client misc info is <xsl:value-of select="$misc_css_token" /> and jti is <xsl:value-of select="$jti" />*
                </xsl:message>
                <xsl:choose>
                    <xsl:when test="$misc_css_token != ''">
                        <xsl:variable name="uuid-predicate">
                            <xsl:call-template name="uuid-validate">
                                <xsl:with-param name="uuid" select="$misc_css_token"/>
                            </xsl:call-template>
                        </xsl:variable>
                        <xsl:if test="$uuid-predicate='true'">
                            <dp:set-http-request-header name="'Authorization'" value="$misc_css_token" />
                        </xsl:if>
                        <xsl:if test="(($uuid-predicate='false') and ($jti !=''))">
                            <dp:set-http-request-header name="'Authorization'" value="$jti" />
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> oauth client continue with resource_request as no previous css information present in the token*
                        </xsl:message>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for resource_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** VALIDATE TOKEN REQUEST type=validate_request                                     **-->
            <!--** DataPower provides a  way for OAuth clients to verify an access token in their   **-->
            <!--** possession using  the  grant type urn:ibm:datapower:validate  to  support this   **-->
            <!--** validation  request. The validate_request  extension point allows  you  to add   **-->
            <!--** additional information or perform additional processing  to the response after   **-->
            <!--** an access token has been verified successfully.                                  **-->
            <!--** INPUT DATA                                                                       **-->
            <!--** <input>                                                                          **-->
            <!--**   <operation>validate_request</operation>                                        **-->
            <!--**   <container>                                                                    **-->
            <!--**     <identity>…</identity>                                                       **-->
            <!--**     <credentials>…</credentials>                                                 **-->
            <!--**     <mapped-credentials>…</mapped-credentials>                                   **-->
            <!--**     <resource>…</resource>                                                       **-->
            <!--**     <mapped-resource>…</mapped-resource>                                         **-->
            <!--**     <approved/>                                                                  **-->
            <!--**     <message>…</message>                                                         **-->
            <!--**      …                                                                           **-->
            <!--**   </container>                                                                   **-->
            <!--** </input>                                                                         **-->
            <!--** After processing, the output contains a <result> node that contains the custom   **-->
            <!--** data from verifying the access token. Processing can return an empty node.       **-->
            <!--** <result>                                                                         **-->
            <!--**   <addinfo>…</addinfo>                                                           **-->
            <!--**     …                                                                            **-->
            <!--**   <times type='json:number'>text</times>                                         **-->
            <!--** </result>                                                                        **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation/text()='validate_request'">
                <dp:set-variable name="'var://context/oauth/type'" value="'validate_request'" />
                <!--** nullify any css information present in the miscinfo if not to be exposed **-->
                <!--
                <result>
                    <miscinfo></miscinfo>
                </result>
                -->
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for validate_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** TOKEN REVOCATION REQUEST type=revoke_request                                     **-->
            <!--** This  is for handling token revocation  requests  by the  oauth client or  the   **-->
            <!--** resource owner. For a resource  owner, set the  revocation grant  type in  the   **-->
            <!--** request to revoke all the tokens that the resource owner issued to a  specific   **-->
            <!--** client. Define the following parameters  of a  resource owner revocation grant   **-->
            <!--** type:                                                                            **-->
            <!--** grant_type: urn:ibm:datapower:owner:revoke                                       **-->
            <!--** client_id: The client ID that indicates from which client the                    **-->
            <!--** resource owner requests to revoke all the tokens                                 **-->
            <!--**                                                                                  **-->
            <!--** For an OAuth client, set  the  revocation grant type in the request  to revoke   **-->
            <!--** specific access tokens or refresh tokens.; define the  following parameters of   **-->
            <!--** a client revocation grant                                                        **-->
            <!--** type:                                                                            **-->
            <!--** grant_type: urn:ibm:datapower:client:revoke                                      **-->
            <!--** client_id: The client ID as defined in the OAuth specification                   **-->
            <!--** Optional: client_secret: The client secret as defined in the                     **-->
            <!--** OAuth specification, when the client type is confidential and                    **-->
            <!--** the client uses client secret for authentication                                 **-->
            <!--** Optional: access_token: The access token to be revoked.                          **-->
            <!--** Optional: refresh_token: The refresh token to be revoked.                        **-->
            <!--**          INPUT DATA                                                              **-->
            <!--** <input>                                                                          **-->
            <!--**   <operation>revoke_request</operation>                                          **-->
            <!--**   <access_token ...>..</access_token>                                            **-->
            <!--**   <refresh_token ....>...</refresh_token>                                        **-->
            <!--**   <client_id ....>oauth-revoke-custom</client_id>                                **-->
            <!--**   <resource_owner>...</resource_owner>                                           **-->
            <!--**   <oauth-id type="client_revoke_request">.....</oauth-id>                        **-->
            <!--**   <OAuthSupportedClient>....</OAuthSupportedClient>                              **-->
            <!--** </input>                                                                         **-->
            <!--**          OUTPUT DATA                                                             **-->
            <!--** After processing, the output  contains one  or two <result> nodes that contain   **-->
            <!--** the custom data. Processing can return an empty node.                            **-->
            <!--** <result><status><success | failure/></result>                                    **-->
            <!--** <result><error>reason</error><error_description/></result>                       **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation/text()='revoke_request'">
                <!--###############################################################################-->
                <!--## grab the css environment identifier based on the incoming host url        ##-->
                <!--###############################################################################-->
                <xsl:variable name="css_environment">
                    <xsl:value-of select="$metadata/security-metadata/css/environment[@id=$css-id]/domain" />
                </xsl:variable>
                <!--###############################################################################-->
                <!--## get the embedded miscinfo from the access_token value if any which would  ##-->
                <!--## be prviously issued css token during access token generation              ##-->
                <!--###############################################################################-->
                <xsl:variable name="previous_css_token">
                    <xsl:value-of select="/input/container/identity/entry/oauth-verified[@state='ok']/result/verified-refresh-token/miscinfo/text()"/>
                </xsl:variable>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> operation (<xsl:value-of select="$css_environment" />) <xsl:value-of select="/input/operation/text()"/> misc: <xsl:value-of select="//miscinfo"/>*
                </xsl:message>
                <!--** if previous css result is non-empty **-->
                <xsl:if test="$previous_css_token != ''">
                    <xsl:variable name="client_id" select="string(//child::entry[@type='oauth']/OAuthSupportedClient/client-id/text())" />
                    <!--###############################################################################-->
                    <!--## set context variables for css and jwt id metadata                         ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="metadata">
                        <xsl:copy-of select="document($openid-metadata)" />
                    </xsl:variable>
                    <!--###############################################################################-->
                    <!--## grab the css app id from the incoming oauth client id                     ##-->
                    <!--## a backup app id ?? probably if none from the oauth client id              ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="app-id" select="string(substring-after(substring-after($client_id,'_'),'_'))" />
                    <xsl:variable name="backup-app-id" select="string($metadata/security-metadata/users/usertype[@category=$userType]/app-id/text())" />
                    <!--###############################################################################-->
                    <!--## grab the css app profile from the openid metadata information             ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="app-profile" select="string($metadata/security-metadata/users/usertype[@category=$userType]/app-profile/text())" />
                    <!--###############################################################################-->
                    <!--## grab the css environment identifier based on the incoming host url        ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="css_environment">
                        <xsl:value-of select="$metadata/security-metadata/css/environment[@id=$css-id]/domain" />
                    </xsl:variable>
                    <!--###############################################################################-->
                    <!--## client ip or the end-user ip or dp local ip address                       ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="client_ip" select="'0.0.0.0'" />
                    <!--###############################################################################-->
                    <!--## get the css token extension url from the service metadata configuration   ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="css-target">
                        <xsl:value-of select="string($metadata/security-metadata/css/environment[@id=$css-id]/extendtoken/text())" />
                    </xsl:variable>
                    <!--###############################################################################-->
                    <!--## get the ssl profile for css service from service metadata configuration   ##-->
                    <!--###############################################################################-->
                    <xsl:variable name="ssl-profile">
                      <xsl:value-of select="concat('client:',$metadata/security-metadata/css/environment[@id=$css-id]/ssl-profile/text())" />
                    </xsl:variable>
                    <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> calling css (<xsl:value-of select="$css_environment" />) token revocation at <xsl:value-of select="$css-target"/> with css token <xsl:value-of select="$previous_css_token" />*
                    </xsl:message>
                    <xsl:call-template name="expire-token">
                        <xsl:with-param name="appId" select="$app-id"/>
                        <xsl:with-param name="token" select="$previous_css_token"/>
                        <xsl:with-param name="source-ip" select="$client_ip"/>
                        <xsl:with-param name="ssl-profile" select="$ssl-profile"/>
                        <xsl:with-param name="reqHeaders" select="$httpHeaders"/>
                        <xsl:with-param name="log-category" select="$dp-log-category"/>
                        <xsl:with-param name="expire-token-url" select="$css-target"/>
                    </xsl:call-template>
                </xsl:if>
                <result>
                    <status>success</status>
                </result>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for revoke_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** CHECK REVOCATOIN | type=check_revocation_request                                 **-->
            <!--** During the  OAuth or resource access  processing, DataPower will need  to verify **-->
            <!--** whether the  token (or  access) has  been revoked.  This operation  provides the **-->
            <!--** needed information for DataPower to proceed.  This operation is only called when **-->
            <!--** DataPower has verified  the token is valid,  and it has not been  revoked due to **-->
            <!--** reuse within the DataPower runtime cache.                                        **-->
            <!--** grant_type: urn:ibm:datapower:owner:revoke                                       **-->
            <!--** client_id: The client ID that indicates from which client the                    **-->
            <!--** resource owner requests to revoke all the tokens                                 **-->
            <!--**                                                                                  **-->
            <!--**          INPUT DATA                                                              **-->
            <!--**    <input>                                                                       **-->
            <!--**        <operation token-type="access_token|                                      **-->
            <!--**                               refresh_token|                                     **-->
            <!--**                               az-code|                                           **-->
            <!--**                               dp-state">check_revocation_request                 **-->
            <!--**        </operation>                                                              **-->
            <!--**        <token>....</token>                                                       **-->
            <!--**        <verified-token>                                                          **-->
            <!--**            <client_id>…</client_id>                                              **-->
            <!--**            <not_after>….</not_after>                                             **-->
            <!--**            <not_after_text>….</not_after_text>                                   **-->
            <!--**            <not_before>…</not_before>                                            **-->
            <!--**            <not_before_text>2014-08-08T08:08:08Z</not_before_text>               **-->
            <!--**            <resource_owner>xx</resource_owner>                                   **-->
            <!--**            <scope>xx</scope>                                                     **-->
            <!--**            <miscinfo>..</miscinfo>                                               **-->
            <!--**        </verified-token>                                                         **-->
            <!--**        <oauth-id type="...">.....</oauth-id>                                     **-->
            <!--**        <OAuthSupportedClient>...</OAuthSupportedClient>                          **-->
            <!--**    </input>                                                                      **-->
            <!--**                                                                                  **-->
            <!--** OUTPUT (if token is revoked)                                                     **-->
            <!--** <result><revoked/></result>                                                      **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation/text()='check_revocation_request'">
                <!--###############################################################################-->
                <!--## grab the css environment identifier based on the incoming host url        ##-->
                <!--###############################################################################-->
                <xsl:variable name="css_environment">
                    <xsl:value-of select="$metadata/security-metadata/css/environment[@id=$css-id]/domain" />
                </xsl:variable>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> operation (<xsl:value-of select="$css_environment" />) <xsl:value-of select="/input/operation/text()"/> misc: <xsl:value-of select="//miscinfo"/>*
                </xsl:message>
                <result>
                    <revoked/>
                </result>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for check_revocation_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** PREAPPROVED CHECK operation preapproved_check                                    **-->
            <!--** For authorization code and implicit grant types, an authorization form will be   **-->
            <!--** presented to  the resource owner for approving the client's request. DataPower   **-->
            <!--** supports  pre-approving or pre-denying  such  requests.  By marking whether  a   **-->
            <!--** request  has  been  pre-approved  or  pre-denied,  DataPower  will  skip   the   **-->
            <!--** authorization form presentation to the resource owner and proceed to the  next   **-->
            <!--** step in the OAuth process.                                                       **-->
            <!--** The  preapproved_check  extension  point  allows  you  to  short-circuit   the   **-->
            <!--** authorization grant process so that some requests can be  approved or  denied.   **-->
            <!--** These cases will  not be presented with  an authorization form when the client   **-->
            <!--** is trying to access the resource.                                                **-->
            <!--**                                                                                  **-->
            <!--**    INPUT DATA                                                                    **-->
            <!--** <input>                                                                          **-->
            <!--**   <operation>preapproved_check</operation>                                       **-->
            <!--**   <container>                                                                    **-->
            <!--**     ... same input for AAA – PostProcess Custom stylesheet ...                   **-->
            <!--**   </container>                                                                   **-->
            <!--** </input>                                                                         **-->
            <!--**                                                                                  **-->
            <!--** After processing, the output contains a <result> node that contains the result   **-->
            <!--** of the pre-approval. If the result is neither yes nor no, the authorization      **-->
            <!--** form is displayed. Returning an empty node will force the authorization form     **-->
            <!--** to be                                                                            **-->
            <!--** <result>                                                                         **-->
            <!--**    <approved>yes|no|nuknown</approved>                                           **-->
            <!--** </result>                                                                        **-->
            <!--**                                                                                  **-->
            <!--** yes: request has been pre-approved, the authorization form will not be presented **-->
            <!--** no: request has been pre-denied, the authorization form will not be presented.   **-->
            <!--** unknown: authorization form will be presented.                                   **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation[(@type='access_token') or
                                             (@type='refresh_token') or
                                             (@type='dp-state') or
                                             (@type='az-code')]/text()='preapproved_check'">
                <xsl:choose>
                    <xsl:when test="/input/container/credentials/entry[@type='oauth']/response_type/text() = 'code'">
                        <result>
                            <approved>unknown</approved>
                        </result>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:message dp:priority="warn" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> [preapproved_check: authorization form denied <xsl:value-of select="/input/container/credentials/entry[@type='oauth']/response_type/text()" />]*
                        </xsl:message>
                        <result>
                            <approved>yes</approved>
                        </result>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for preapproved_check <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
            <!--**************************************************************************************-->
            <!--** MISCELLANEOUS INFO CHECK operation miscinfo_request                              **-->
            <!--** This operation allows  the OAuth client to add miscellaneous  information to a   **-->
            <!--** token. The authorization server adds the response to  the token and returns it   **-->
            <!--** to  the OAuth client.  The maximum number of characters in this information is   **-->
            <!--** 512.                                                                             **-->
            <!--** INPUT DATA                                                                       **-->
            <!--**  <input>                                                                         **-->
            <!--**    <operation>@type='dp-state | az-code | access-token'>                         **-->
            <!--**      miscinfo_request                                                            **-->
            <!--**    </operation>                                                                  **-->
            <!--**    <container>                                                                   **-->
            <!--**      <identity>…</identity>                                                      **-->
            <!--**      <credentials>…</credentials>                                                **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                                  **-->
            <!--**      <resource>…</resource>                                                      **-->
            <!--**      <mapped-resource>…</mapped-resource>                                        **-->
            <!--**        …                                                                         **-->
            <!--**    </container>                                                                  **-->
            <!--**  </input>                                                                        **-->
            <!--**                                                                                  **-->
            <!--** After  processing, the  output  contains  a  <result> node  that contains  the   **-->
            <!--** response to the miscinfo request.  For example, if there is  a session that is   **-->
            <!--** persistent in a database somewhere,  you can use this field to store the index   **-->
            <!--** of the entry to the database. Processing can return an empty node.               **-->
            <!--**  <result>                                                                        **-->
            <!--**    <miscinfo>value</miscinfo>                                                    **-->
            <!--**  </result>                                                                       **-->
            <!--** If the  miscellaneous information  is added  during dp-state,  DataPower  will   **-->
            <!--** automatically carry the  value  forward to az-code and  access-token. However,   **-->
            <!--** you can override that information during @type=az-code,  or @type=access-token   **-->
            <!--** if needed. If the miscellaneous information is added during az-code, DataPower   **-->
            <!--** will automatically carry the value forward to access_token and  refresh_token,   **-->
            <!--** unless it is overridden later during @type=access-token.                         **-->
            <!--**************************************************************************************-->
            <xsl:when test="/input/operation[(@type='access-token') or (@type='dp-state') or (@type='az-code')]/text()='miscinfo_request'">
                <dp:set-variable name="'var://context/oauth/type'" value="'misc_request'" />
                <xsl:variable name="client_id" select="string(//child::entry[@type='oauth']/OAuthSupportedClient/client-id/text())" />
                <!--###############################################################################-->
                <!--## set context variables for css and jwt id token metadata                   ##-->
                <!--###############################################################################-->
                <xsl:variable name="metadata">
                    <xsl:copy-of select="document($openid-metadata)" />
                </xsl:variable>
                <!--###############################################################################-->
                <!--## grab the css app id from the incoming oauth client id                     ##-->
                <!--###############################################################################-->
                <xsl:variable name="app-id" select="string(substring-after(substring-after($client_id,'_'),'_'))" />
                <!--###############################################################################-->
                <!--## a backup app id ?? probably if none from the oauth client id              ##-->
                <!--###############################################################################-->
                <xsl:variable name="backup-app-id" select="string($metadata/security-metadata/users/usertype[@category=$userType]/app-id/text())" />
                <!--###############################################################################-->
                <!--## grab session boolean predicate which decides whether to call css or not   ##-->
                <!--###############################################################################-->
                <xsl:variable name="css_session_predicate">
                    <xsl:value-of select="$metadata/security-metadata/css/environment[@id=$css-id]/session" />
                </xsl:variable>
                <!--###############################################################################-->
                <!--## grab the css environment identifier based on the incoming host url        ##-->
                <!--###############################################################################-->
                <xsl:variable name="css_environment">
                    <xsl:value-of select="$metadata/security-metadata/css/environment[@id=$css-id]/domain" />
                </xsl:variable>
                <dp:set-variable name="'var://context/oauth/app-id'" value="$app-id" />
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css_session_predicate (<xsl:value-of select="$css_environment" />): <xsl:value-of select="$metadata/security-metadata/css/environment[@id=$css-id]/session/text()" /> for app_id <xsl:value-of select="$app-id" />*
                </xsl:message>
                <!--###############################################################################-->
                <!--## get the actual grant type for request under the miscinfo processing stage ##-->
                <!--###############################################################################-->
                <xsl:variable name="request_grant_type">
                    <xsl:value-of select="/input/container/identity/entry/oauth-id[@type='access_request']/grant_type/text()" />
                </xsl:variable>
                <!--###############################################################################-->
                <!--## in case of grant_type=refresh_token then the following is valid           ##-->
                <!--## get the embedded miscinfo from the refresh_token value if any which would ##-->
                <!--## be prviously issued css token during access token generation              ##-->
                <!--###############################################################################-->
                <xsl:variable name="previous_css_token">
                    <xsl:value-of select="/input/container/identity/entry/oauth-verified[@state='ok']/result/verified-refresh-token/miscinfo/text()"/>
                </xsl:variable>
                <!--###############################################################################-->
                <!--## create a predicate depending on the userType from the incoming request,   ##-->
                <!--## which is needed to decide whether to make a call to css or not in case of ##-->
                <!--## a missing userType attribute in the token request                         ##-->
                <!--###############################################################################-->
                <xsl:variable name="user_type_predicate">
                	<xsl:choose>
                		<xsl:when test="(($userType = 'maybeGuest') or
                						         ($userType = 'maybeEmployee') or
                						         ($userType = 'maybeCustomer') or
                						         ($userType = 'maybeTester'))">
                			<xsl:text>true</xsl:text>
                		</xsl:when>
                		<xsl:otherwise>
                			<xsl:text>false</xsl:text>
                		</xsl:otherwise>
                	</xsl:choose>
                </xsl:variable>
                <!--********************************************************************-->
                <!--** CSS TOKEN HANDLING SECTION (START)                             **-->
                <!--********************************************************************-->
                <xsl:variable name="cssToken">
                    <xsl:choose>
                        <!--###############################################################################-->
                        <!--## specifically check first if the grant_type is for refresh_token           ##-->
                        <!--###############################################################################-->
                        <xsl:when test="$request_grant_type='refresh_token'">
                            <xsl:choose>
                                <!--###############################################################################-->
                                <!--## check if previous css token and css app id are available and non empty    ##-->
                                <!--###############################################################################-->
                                <xsl:when test="(($previous_css_token != '') and ($app-id != ''))">
                                    <!-- <xsl:variable name="app-profile" select="string($metadata/security-metadata/users/usertype[@category=$userType]/app-profile/text())" /> -->
                                    <!--###############################################################################-->
                                    <!--## client ip or the end-user ip or dp local ip address                       ##-->
                                    <!--###############################################################################-->
                                    <xsl:variable name="client_ip" select="'0.0.0.0'" />
                                    <!--###############################################################################-->
                                    <!--## get the css token extension url from the service metadata configuration   ##-->
                                    <!--###############################################################################-->
                                    <xsl:variable name="css-target">
                                        <xsl:value-of select="string($metadata/security-metadata/css/environment[@id=$css-id]/extendtoken/text())" />
                                    </xsl:variable>
                                    <!--###############################################################################-->
                                    <!--## get the ssl profile for css service from service metadata configuration   ##-->
                                    <!--###############################################################################-->
                                    <xsl:variable name="ssl-profile">
                                      <xsl:value-of select="concat('client:',$metadata/security-metadata/css/environment[@id=$css-id]/ssl-profile/text())" />
                                    </xsl:variable>
                                    <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> calling css token extend (<xsl:value-of select="$css_environment" />) session at <xsl:value-of select="$css-target"/> for appid <xsl:value-of select="$app-id"/> with a previous css token <xsl:value-of select="$previous_css_token" />*
                                    </xsl:message>
                                    <!--###############################################################################-->
                                    <!--## now call the extend token service over the previous css user token        ##-->
                                    <!--###############################################################################-->
                                    <xsl:call-template name="extend-token">
                                        <xsl:with-param name="appId" select="$app-id" />
                                        <xsl:with-param name="token" select="$previous_css_token" />
                                        <xsl:with-param name="service-version" select="'5.0'" />
                                        <xsl:with-param name="source-ip" select="$client_ip" />
                                        <xsl:with-param name="ssl-profile" select="$ssl-profile" />
                                        <xsl:with-param name="reqHeaders" select="$httpHeaders" />
                                        <xsl:with-param name="extend-token-url" select="$css-target" />
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:otherwise>
                                    <!--###############################################################################-->
                                    <!--## if there is no css info in misc then return a false value                 ##-->
                                    <!--###############################################################################-->
                                    <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> no previous css (<xsl:value-of select="$css_environment" />) token extension not required*
                                    </xsl:message>
                                    <xsl:text>css_false</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <!--###############################################################################-->
                        <!--## check if the grant_type is for issuing a new token based on profile       ##-->
                        <!--###############################################################################-->
                        <xsl:when test="(($request_grant_type='client_credentials') or
                                         ($request_grant_type='password') or
                                         ($request_grant_type='implicit') or
                                         ($request_grant_type='authorization_code'))">
                            <xsl:choose>
                                <!--###############################################################################-->
                                <!--## call css service if session prdicate is true and app-id is non empty      ##-->
                                <!--###############################################################################-->
                                <xsl:when test="(($css_session_predicate='true') and
                                                 ($app-id != '') and
                                                 ($user_type_predicate='true'))">
                                    <xsl:choose>
                                        <!--###############################################################################-->
                                        <!--## if user type is a valid mp customer, carry over the authenticated token   ##-->
                                        <!--## generated in custom authentication phase rather than generating a new css ##-->
                                        <!--## user token and session from the css anonymous service                     ##-->
                                        <!--###############################################################################-->
                                        <xsl:when test="$userType='maybeCustomer'">
                                            <xsl:value-of select="dp:variable('var://context/oauth/css-token')" />
                                        </xsl:when>
                                        <!--###############################################################################-->
                                        <!--## if user type is either guest or employee or any other than customer       ##-->
                                        <!--###############################################################################-->
                                        <xsl:otherwise>
                                            <xsl:variable name="app-profile" select="string($metadata/security-metadata/users/usertype[@category=$userType]/app-profile/text())" />
                                            <!--###############################################################################-->
                                            <!--## client or the end-user local ip address                                   ##-->
                                            <!--###############################################################################-->
                                            <xsl:variable name="client_ip" select="dp:variable('var://context/oauth/endUserAgentIP')" />
                                            <!--###############################################################################-->
                                            <!--## get the css service token url from the service metadata configuration     ##-->
                                            <!--###############################################################################-->
                                            <xsl:variable name="css-target">
                                                <xsl:value-of select="string($metadata/security-metadata/css/environment[@id=$css-id]/anonymous/text())" />
                                            </xsl:variable>
                                            <!--###############################################################################-->
                                            <!--## get the ssl profile for css service from service metadata configuration   ##-->
                                            <!--###############################################################################-->
                                            <xsl:variable name="ssl-profile">
                                              <xsl:value-of select="concat('client:',$metadata/security-metadata/css/environment[@id=$css-id]/ssl-profile/text())" />
                                            </xsl:variable>
                                            <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> calling anonymous css (<xsl:value-of select="$css_environment" />) session at <xsl:value-of select="$css-target" /> with appid <xsl:value-of select="$app-id"/> and profile <xsl:value-of select="$app-profile"/>*
                                            </xsl:message>
                                            <dp:url-open target="{$css-target}"
                                                         ssl-proxy="{$ssl-profile}"
                                                         timeout="30"
                                                         response="responsecode"
                                                         http-method="post">
                                               <anonymousSessionRequest><application><xsl:value-of select="$app-id"/></application>
                                                  <applicationProfile><xsl:value-of select="$app-profile"/></applicationProfile>
                                                  <transaction />
                                                  <session/>
                                                  <metadata />
                                                  <source><xsl:value-of select="$client_ip"/></source>
                                                  <version>5.0</version>
                                              </anonymousSessionRequest>
                                            </dp:url-open>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <!--###############################################################################-->
                                <!--## if session predicate is false, do not call the css service                ##-->
                                <!--###############################################################################-->
                                <xsl:otherwise>
                                    <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css (<xsl:value-of select="$css_environment" />) anonymous session not needed for <xsl:value-of select="$client_id" />*
                                    </xsl:message>
                                    <xsl:text>css_false</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:variable>
                <!--********************************************************************-->
                <!--** CSS TOKEN HANDLING SECTION (END)                               **-->
                <!--********************************************************************-->

                <result>
                    <xsl:choose>
                        <xsl:when test="$userType='maybeCustomer'">
                            <xsl:variable name="authenticated_css_token">
                                <xsl:value-of select="$cssToken" />
                            </xsl:variable>
                            <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css (<xsl:value-of select="$css_environment" />) token from customer authenticated profile: <xsl:value-of select="$cssToken" />*</xsl:message>
                            <miscinfo>
                                <xsl:choose>
                                    <xsl:when test="$authenticated_css_token != ''">
                                        <dp:set-variable name="'var://context/oauth/misc-result'" value="'true'" />
                                        <xsl:variable name="authenticated_css_token">
                                            <xsl:value-of select="dp:variable('var://context/oauth/css-token')" />
                                        </xsl:variable>
                                        <xsl:value-of select="$authenticated_css_token"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <dp:set-variable name="'var://context/oauth/misc-result'" value="'false'" />
                                      <xsl:text>css_authentication_error</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </miscinfo>
                        </xsl:when>
                        <xsl:when test="$cssToken != 'css_false'">
                            <xsl:choose>
                                <xsl:when test="$cssToken/url-open/responsecode/text() = 200">
                                    <!--********************************************************************-->
                                    <!--** take the UseToken (which is the GUID for CSS Authentication)   **-->
                                    <!--** and the SessionToken to store as JTI in the id token           **-->
                                    <!--********************************************************************-->
                                    <xsl:choose>
                                        <xsl:when test="$previous_css_token != ''">
                                            <xsl:variable name="css-token">
                                                <xsl:choose>
                                                    <xsl:when test="$cssToken/url-open/response/ExtendTokenCallWrapper/SessionValidationResult='ValidAndExtended'">
                                                        <xsl:value-of select="$cssToken/url-open/response/ExtendTokenCallWrapper/UseToken/text()" />
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:message dp:priority="error" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css (<xsl:value-of select="$css_environment" />) token extension failed: <xsl:value-of select="$cssToken/url-open/response/ExtendTokenCallWrapper/ExceptionMessage/text()" />*</xsl:message>
                                                        <xsl:value-of select="concat('css_error',' ', $cssToken/url-open/response/ExtendTokenCallWrapper/ExceptionMessage/text())" />
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:variable>
                                            <xsl:choose>
                                                <xsl:when test="contains($css-token,'error')">
                                                    <dp:set-variable name="'var://context/oauth/misc-result'" value="'false'" />
                                                    <xsl:message dp:priority="error" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css (<xsl:value-of select="$css_environment" />) token extension error: <xsl:value-of select="$css-token" />*</xsl:message>
                                                    <miscinfo></miscinfo>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:variable name="css-session" select="$cssToken/url-open/response/ExtendTokenCallWrapper/SessionToken/text()" />
                                                    <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css (<xsl:value-of select="$css_environment" />) token extension result: <xsl:value-of select="$css-token" />*</xsl:message>
                                                    <dp:set-variable name="'var://context/oauth/css-token'" value="string($css-token)" />
                                                    <dp:set-variable name="'var://context/oauth/css-session'" value="string($css-session)" />
                                                    <dp:set-variable name="'var://context/oauth/misc-result'" value="'true'" />
                                                    <miscinfo>
                                                        <xsl:value-of select="$css-token"/>
                                                    </miscinfo>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:variable name="css-token">
                                                <xsl:choose>
                                                    <xsl:when test="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/CallAuthenticationOperationResult/text()='Success'">
                                                        <xsl:value-of select="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/UseToken/text()"/>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:message dp:priority="error" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css (<xsl:value-of select="$css_environment" />) token generation failure: <xsl:value-of select="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/ExceptionMessage/text()" />*</xsl:message>
                                                        <xsl:value-of select="concat('css_error',' ', $cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/ExceptionMessage/text())" />
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:variable>
                                            <xsl:choose>
                                                <xsl:when test="contains($css-token,'error')">
                                                    <dp:set-variable name="'var://context/oauth/misc-result'" value="'false'" />
                                                    <xsl:message dp:priority="error" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css (<xsl:value-of select="$css_environment" />) token <xsl:value-of select="$css-token" /> with error <xsl:value-of select="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/ExceptionMessage/text()" />*
                                                    </xsl:message>
                                                    <miscinfo/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:variable name="css-session" select="$cssToken/url-open/response/AcquireAnonymousSessionCallWrapper/SessionToken/text()" />
                                                    <dp:set-variable name="'var://context/oauth/css-token'" value="string($css-token)" />
                                                    <dp:set-variable name="'var://context/oauth/css-session'" value="string($css-session)" />
                                                    <dp:set-variable name="'var://context/oauth/misc-result'" value="'true'" />
                                                    <xsl:message dp:priority="info" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> css (<xsl:value-of select="$css_environment" />) token generated: <xsl:value-of select="$css-token" /> successfully*
                                                    </xsl:message>
                                                    <miscinfo>
                                                        <xsl:value-of select="$css-token"/>
                                                    </miscinfo>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>
                                    <dp:set-variable name="'var://context/oauth/misc-result'" value="'false'" />
                                    <xsl:message dp:priority="error" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> error generating css (<xsl:value-of select="$css_environment" />) token <xsl:value-of select="concat($cssToken/url-open/errorstring/text(), ', status_code:', $cssToken/url-open/statuscode/text())" />*
                                    </xsl:message>
                                    <dp:set-variable name="'var://context/oauth/css-token'" value="'css_error'" />
                                    <dp:set-variable name="'var://context/oauth/css-session'" value="''" />
                                    <miscinfo>css_error <xsl:value-of select="$cssToken/url-open/errorstring/text()" /></miscinfo>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:otherwise>
                            <dp:set-variable name="'var://context/oauth/misc-result'" value="'true'" />
                            <miscinfo></miscinfo>
                        </xsl:otherwise>
                    </xsl:choose>
                </result>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for miscinfo_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
            <!--****************************************************************************-->
            <!--** AUTHORIZATION REQUEST operation is authorization_request               **-->
            <!--** This is invoked after an  authorization code is generated successfully **-->
            <!--** (as  in  an  authorization  code grant  type).  It  allows  additional **-->
            <!--** information  to  be  returned  to  the OAuth  client  along  with  the **-->
            <!--** authorization code;  the processing  returns a  node set  that becomes **-->
            <!--** part of  the query string  which is sent to  the client with  HTTP 302 **-->
            <!--** redirect                                                               **-->
            <!--**                                                                        **-->
            <!--**  HTTP/1.1 302 Processed                                                **-->
            <!--**  Location: https://{client-hostname-redirect-url}?                     **-->
            <!--**      code=........&state=........                                      **-->
            <!--**                                                                        **-->
            <!--**  <input>                                                               **-->
            <!--**    <operation>authorization_request</operation>                        **-->
            <!--**    <container>                                                         **-->
            <!--**      <identity>…</identity>                                            **-->
            <!--**      <credentials>…</credentials>                                      **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                        **-->
            <!--**      <resource>…</resource>                                            **-->
            <!--**      <mapped-resource>…</mapped-resource>                              **-->
            <!--**        …                                                               **-->
            <!--**    </container>                                                        **-->
            <!--**  </input>                                                              **-->
            <!--**                                                                        **-->
            <!--**  After processing, the output contains a <result> node that contains   **-->
            <!--**  the custom data. Processing can return an empty node.                 **-->
            <!--**  <result>                                                              **-->
            <!--**    <customdata>value</customdata>                                      **-->
            <!--**    <customdata>value</customdata>                                      **-->
            <!--**  </result>                                                             **-->
            <!--****************************************************************************-->
            <xsl:when test="/input/operation/text()='authorization_request'">
                <dp:set-variable name="'var://context/oauth/type'" value="'authorization_request'" />
                <result/>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for authorization_request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
            <!--**********************************************************************************************-->
            <!--** AUTHORIZATION FORM operation authorization_form                                          **-->
            <!--** For authorization code and implicit grant types, the resource owner will be presented    **-->
            <!--** with an authorization form in which the resource owner can grant access to the requested **-->
            <!--** resources by the OAuth client. By default, DataPower allows the resource owner to grant  **-->
            <!--** only a subset of the requested scope by the client. After selecting the scope from the   **-->
            <!--** authorization form, the resource owner uses the authorization form operation to handle   **-->
            <!--** the selected scope. This operation applies to authorization code grant type and implicit **-->
            <!--** grant type.                                                                              **-->
            <!--**                                                                                          **-->
            <!--**  INPUT DATA                                                                              **-->
            <!--**  <input>                                                                                 **-->
            <!--**    <operation>authorization_form</operation>                                             **-->
            <!--**    <container>                                                                           **-->
            <!--**      <identity>…</identity>                                                              **-->
            <!--**      <credentials>…</credentials>                                                        **-->
            <!--**      <mapped-credentials>…</mapped-credentials>                                          **-->
            <!--**      <resource>…</resource>                                                              **-->
            <!--**      <mapped-resource>…</mapped-resource>                                                **-->
            <!--**        …                                                                                 **-->
            <!--**    </container>                                                                          **-->
            <!--**  </input>                                                                                **-->
            <!--**                                                                                          **-->
            <!--**  After processing, the output contains a <result><scope></scope></result> node that      **-->
            <!--**  contains the custom data. Processing can return an empty node.                          **-->
            <!--**  <result>                                                                                **-->
            <!--**    <scope>scope selected by resource owner space deliminated</scope>                     **-->
            <!--**  </result>                                                                               **-->
            <!--**********************************************************************************************-->
            <xsl:when test="/input/operation/text()='authorization_form'">
                <result/>
                <xsl:message dp:priority="debug" dp:type="{$dp-log-category}">*<xsl:value-of select="$lp" /> time taken for authorization_form request <xsl:value-of select="dp:variable('var://service/time-elapsed') - $init_time"/> ms*
                </xsl:message>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <!--###############################################################################-->
    <!-- Identity Template                                                             -->
    <!--###############################################################################-->
    <xsl:template match="attribute-value">
        <xsl:copy-of select="." />
    </xsl:template>
    <!--###############################################################################-->
    <!--## named template for refreshing/extending css token lifetime                ##-->
    <!--###############################################################################-->
    <xsl:template name="extend-token">
        <xsl:param name="appId" />
        <xsl:param name="token" />
        <xsl:param name="service-version" />
        <xsl:param name="source-ip" />
        <xsl:param name="ssl-profile" />
        <xsl:param name="reqHeaders" />
        <xsl:param name="extend-token-url" />
        <xsl:variable name="extend-token-request">
            <extendTokenRequest><application><xsl:value-of select="$appId" /></application>
                <token><xsl:value-of select="$token" /></token>
                <source><xsl:value-of select="$source-ip" /></source>
                <version><xsl:value-of select="$service-version" /></version>
            </extendTokenRequest>
        </xsl:variable>
        <xsl:variable name="extend-token-response">
            <dp:url-open target="{$extend-token-url}"
                         ssl-proxy="{$ssl-profile}"
                         timeout="30"
                         response="responsecode"
                         http-headers="$reqHeaders/*"
                         http-method="post">
               <xsl:copy-of select="$extend-token-request" />
            </dp:url-open>
        </xsl:variable>
        <xsl:copy-of select="$extend-token-response" />
    </xsl:template>
    <!--###############################################################################-->
    <!--## named template for revoking/expiring css token or signing out             ##-->
    <!--###############################################################################-->
    <xsl:template name="expire-token">
        <xsl:param name="appId" />
        <xsl:param name="token" />
        <xsl:param name="source-ip" />
        <xsl:param name="ssl-profile" />
        <xsl:param name="reqHeaders" />
        <xsl:param name="log-category"/>
        <xsl:param name="expire-token-url" />
        <xsl:variable name="expire-token-request">
            <signOutSessionRequest><application><xsl:value-of select="$appId" /></application>
                <token><xsl:value-of select="$token" /></token>
                <source><xsl:value-of select="$source-ip" /></source>
            </signOutSessionRequest>
        </xsl:variable>
        <xsl:message dp:priority="info" dp:type="{$log-category}">*<xsl:value-of select="$lp" /> css expiry call invoked for appid: <xsl:value-of select="$appId"/>*
        </xsl:message>
        <xsl:variable name="expire-token-response">
            <dp:url-open target="{$expire-token-url}"
                         ssl-proxy="{$ssl-profile}"
                         timeout="30"
                         response="responsecode"
                         http-headers="$reqHeaders/*"
                         http-method="post">
               <xsl:copy-of select="$expire-token-request" />
            </dp:url-open>
        </xsl:variable>
        <xsl:variable name="signout-response">
            <xsl:value-of select="$expire-token-response/url-open/response/SignOutSessionCallWrapper/SignOutSessionOperationResult/text()"/>
        </xsl:variable>
        <xsl:message dp:priority="info" dp:type="{$log-category}">*<xsl:value-of select="$lp" /> css token <xsl:value-of select="$token" />  expiry call: <xsl:value-of select="$signout-response"/>*
        </xsl:message>
        <xsl:copy-of select="$expire-token-response" />
    </xsl:template>

    <!--###############################################################################-->
    <!--## a named template for validating the uuid value                            ##-->
    <!--###############################################################################-->
    <xsl:template name="uuid-validate">
        <xsl:param name="uuid" />
        <xsl:variable name="uuid-length" select="string-length($uuid)" />
        <xsl:variable name="uuid-dashes">
            <xsl:value-of select="string-length($uuid) - string-length(translate($uuid,'-',''))" />
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="(($uuid-length = 36) and ($uuid-dashes = 4))">
                <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>false</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>
