/**
 *
 * @file getProfile.js
 * @copyright (C) United Airlines Inc. 2017
 * @author Sampath Singamsetty
 * @version 1.0
 * @date 09-18-2017
 *
 * @description Datapower GetAgentProfile using SessionToken
 *
 * {@link https://unitedservicesstage.ual.com/6.0/Security/SineTableManager/GetAgentProfile}
 *
 * @module getProfile
 */

/**
 * datapower service variable for header metadata
 * @var {object} hm
 */
var hm = require('header-metadata');

/**
 * datapower service variable for fine grained metadata and
 * service specific information
 * @var {object} sm
 */
var sm = require('service-metadata');

/**
 * Insert a custom http header to indicate that the call is made implicitly
 * by  datapower for  validating the  token  rather than the user making an
 * explicit call for token introspection. This value will be again referred
 * during the id token  validation by the id-token-validate template within
 * the MsgTransformer.xslt tranformation.
 * @var {string} hdr
 */
var hdr = 'DatapowerGateway';

/**
 * get the initial total elapsed time from the service variable metadata
 * @constant
 * @var {number} tInit
 */
const tInit = sm.timeElapsed;

/**
 * calculate the time difference between the current timestamp and time elapsed
 * this will give the total time taken for the preceding transaction till that
 * particular moment
 * @var {number} tDiff
 */
var tDiff;


var sslclient = session.parameters.sslclient;
var getAgentProfileSvcUrl = session.parameters.getAgentProfileSvcUrl;
var content_type = session.parameters.content_type;
var css_token = session.parameters.css_token;
var json_request = session.parameters.profile_request;
var lc = session.parameters.lc;

var sharedCtx = session.name('CSRApp');

var aaa = typeof sharedCtx !== 'undefined' ? sharedCtx.getVariable('AAA') : '';
var agentSine = typeof sharedCtx !== 'undefined' ? sharedCtx.getVariable('AgentSine') : '';
var dutyCode = typeof sharedCtx !== 'undefined' ? sharedCtx.getVariable('DutyCode') : '';
var sineNumber = typeof sharedCtx !== 'undefined' ? sharedCtx.getVariable('SineNumber') : '';

/**
 * Set  a log  prefix  inorder  to identify  this  script  in the  logger
 * statements. The value ill be included in every log statement ritten by
 * this gateway script.
 * @var {object} lp
 */
var lp = "[CSRApp (GetAgentProfile)]";

/**
 * Define a custom log category configured in DataPower for logging
 * the events to a custom log file of choice
 * @var {object} logConsole
 */
var logConsole = console.options({
    'category': lc
});

// a small error condition to handle for log category missing case
try {
    logConsole.debug("%s logging to %s", lp, logConsole);
} catch (e) {
    logConsole = console;
    logConsole.warn("%s %s category does not exist. falling back to default log category", lp, logConsole);
}


// import library for making outbound calls
var urlopen = require('urlopen');

// define additional options for outbound calls using the urlopen
var options = {
    target: getAgentProfileSvcUrl,
    sslClientProfile: sslclient,
    method: 'post',
    contentType: content_type,
    headers: {
        'Authorization': css_token,
        'Accept': 'application/json'
    },
    timeout: 30,
    data: JSON.parse(json_request)
};

var xmlOption = {
    omitXmlDeclaration: false
};

var vRes;
var vpRes;

/**
 * @function isEmpty
 * Check if a given string is empty or not
 * @param {string} str - The input string for checking
 * @returns {boolean} Returns true or false based on whether the
 *                    string is empty or not.
 */
function isEmpty(str) {
    if (typeof str === 'undefined' ||
        !str ||
        str.length === 0 ||
        str === "" ||
        !/[^\s]/.test(str) ||
        /^\s*$/.test(str) ||
        str.replace(/\s/g, "") === "") {
        return true;
    } else {
        return false;
    }
}

// open connection to the target introspection end-point and send data over
urlopen.open(options, function (error, response) {
    if (error) {
        // an error occurred during request sending or response header parsing
        tDiff = sm.timeElapsed - tInit;
        logConsole.notice("%s time taken for the transaction %d ms", lp, tDiff);
        logConsole.error("%s error %s occurred during validation call", lp, error);
        session.output.write("urlopen connect error: " + JSON.stringify(error));
    } else {
        // read response data and get the response status code
        var responseStatusCode = response.statusCode;
        var reasonPhrase = response.reasonPhrase;
        logConsole.info("%s reason %s and status_code %s for token introspection", lp, reasonPhrase, responseStatusCode);
        // check if the response code is a 200 SUCCESS
        if (responseStatusCode === 200) {
            response.readAsJSON(function (readAsJSONErr, jsonData) {
                if (readAsJSONErr) {
                    logConsole.error("%s error %s parsing json data during introspection", lp, JSON.stringify(readAsJSONErr));
                    response.readAsBuffers(function (readAsBuffersError, data) {
                        if (readAsBuffersError) {
                            logConsole.error('Error on readAsBuffers: ' + readAsBuffersError);
                        } else {
                            if (data.slice(0, 5).toString() === '<?xml' || data.slice(0, 4).toString() === '<Get') {
                                logConsole.error("%s parsing xml response %s", lp, XML.strigify(data));
                                sharedCtx.setVar('agentProfileXml', data);
                            } else {
                                logConsole.error("%s parsing binary response %s", lp, data);
                            }
                        }
                    })
                } else {
                    vRes = JSON.stringify(jsonData);
                    vpRes = JSON.parse(vRes);
                    var agentArr = vpRes.Agents;
                    var miscinfo = [];
                    for (var t = 0; t < agentArr.length; t++) {
                        miscinfo.push(agentArr[t].EmployeeID);
                        logConsole.debug("%s shares signin employee id %s", lp, agentArr[t].EmployeeID);
                    }
                    logConsole.debug("%s shares signin response after parsing %s %s %s", lp, vRes, vpRes, miscinfo);
                    // a variable to hold the token activity status
                    var res = [];
                    var msgArr = vpRes.Response.Message;
                    for (var z = 0; z < msgArr; z++) {
                        res.push(msgArr[z].Status);
                        logConsole.debug("%s shares signin status %s", lp, res);
                    }
                    var result = res.length !== 0 ? res : '';
                    if (!isEmpty(result)) {
                        sharedCtx.setVar('get_agent_profile_status', 'true');
                        sharedCtx.setVar('token_misc_info', typeof miscinfo !== 'undefined' ? miscinfo : '');
                    } else {
                        sharedCtx.setVar('get_agent_profile_status', 'false');
                        logConsole.warn("%s get agent profile error %s", lp, vRes);
                        sharedCtx.setVar('agent_profile_error', vpRes);
                    }
                }
            });
        } else {
            logConsole.error("%s get agent profile error", lp);
            sharedCtx.setVar('get_agent_profile_status', 'false');
        }
        tDiff = sm.timeElapsed - tInit;
        logConsole.notice("%s time taken for token validation transaction %d ms", lp, tDiff);
    }
}); // end of urlopen.open()
