{'Next', 'generation', 'completion', 'framework', 'after', 'NeoComplcache', 'advanced', 'auto', 'using', 'neocomplete', 'instead', 'cache', 's:fts', 'has_key(', 'g:plugs', 'g:acp_enableAtStartup', 'disabling', 'AutoComplPop', 'youcompleteme', 'index(', '&filetype', 'g:neocomplete#enable_at_startup', 'startup', 'else', 'endif', 'g:neocomplete#data_directory', 'GetCacheDir(', 'g:neocomplete#enable_smart_case', 'smart', '-case', 'g:neocomplete#enable_camel_case', 'g:neocomplete#enable_fuzzy_completion', 'g:neocomplete#sources#syntax#min_keyword_length', 'minimum', 'syntax', 'keyword', 'length', 'g:neocomplete#sources#syntax#min_syntax_length', 'g:neocomplete#lock_buffer_name_pattern', 'regex', 'buffer', 'name', 'g:neocomplete#enable_auto_delimiter', 'g:neocomplete#enable_auto_select', 'like', 'behaviour', 'g:neocomplete#enable_refresh_always', 'increases', 'screen', 'flicker', 'g:neocomplete#use_vimproc', 'define', 'dictionary', 'g:neocomplete#sources#dictionary#dictionaries', 'default', 'vimshell', '$HOME', 'dict', 'vimshell_hist', 'scheme', 'gosh_completions', 'erlang', 'javascript', 'scala', '-erl', 'objc', 'executable(', 'local', 'ctags', 'g:neocomplete#ctags_command', 'exists(', 'g:neocomplete#same_filetypes', '-man', '-erlang', 'ruby', '-refe', 'includes', 'g:neocomplete#sources#inckude#paths', 'g:neocomplete#sources#include#paths', 'include', 'g:neocomplete#sources#include#patterns', 'patterns', 'g:neocomplete#keyword_patterns', 'enable', 'heavy', 'omni', 'g:neocomplete#sources#omni#input_patterns', 'g:neocomplete#force_overwrite_completefunc', 'g:neocomplete#force_omni_input_patterns', '[:digit:]', '[:alnum:]', 'python', 'from', 'import', 'markdown', 'gitcommit', 'delimiter', 'pattern', 'complete', 'function', 'g:neocomplete#delimiter_patterns', 'decide', 'source', 'names', 'g:neocomplete#sources', 'file', 'member', 'g:neocomplete#sources#vim#complete_functions', 'Unite', 'unite#complete_source', 'VimShell', 'vimshell#complete', 'external', 'plugins', 'g:neocomplete#sources#omni#functions', 'gocomplete#Complete', 'clojure', 'vimclojure#OmniCompletion', 'plugin', 'mappings', 'NeoComplete', 'inoremap', '<expr>', '<C-g>', 'neocomplete#undo_completion(', '<C-l>', 'neocomplete#complete_common_string(', '<C-e>', 'neocomplete#cancel_popup('}
