/**
 *
 * @file GetEmployeeIDToken.js
 * @copyright (C) United Airlines Inc. 2017
 * @author Sampath Singamsetty (Middleware Engineering)
 * @version 1.0
 * @date 04-09-2018
 *
 * @description Datapower GetEmployeeIDToken using SessionToken
 *
 * {@link https://andcdevdpintra1p02.ual.com:3889/oauth2/v1/token}
 *
 * @module GetEmployeeIDToken
 */

/**
 * datapower service variable for header metadata
 * @var {object} hm
 */
var hm = require('header-metadata');

/**
 * datapower service variable for fine grained metadata and
 * service specific information
 * @var {object} sm
 */
var sm = require('service-metadata');

/**
 * datapower api variable for invoking the urlopen operations over 3rd party
 * services over http/https/mq protocols programmatically through this javascript
 * @var {object} urlopen
 */
var urlopen = require('urlopen');

/**
 * Insert a custom http header to indicate that the call is made implicitly
 * by  datapower for  validating the  token  rather than the user making an
 * explicit call for token introspection. This value will be again referred
 * during the id token  validation by the id-token-validate template within
 * the MsgTransformer.xslt tranformation.
 * @var {string} hdr
 */
/**
 * get the initial total elapsed time from the service variable metadata
 * @constant
 * @var {number} tInit
 */
const tInit = sm.timeElapsed;

/**
 * calculate the time difference between the current timestamp and time elapsed
 * this will give the total time taken for the preceding transaction till that
 * particular moment
 * @var {number} tDiff
 */
var tDiff;

/**
 * sslclient is a variable injected by the calling transformation AddOnOAuthProcessing.xslt
 * and the variable holds the reference for an ssl client object configured in datapower
 * @var {object} sslclient
 */
var sslclient = session.parameters.sslclient;

/**
 * getEmpTokenSvcUrl is a variable injected by the calling transformation AddOnOAuthProcessing.xslt
 * and the variable holds the reference for the backend CSL service for getting Agent Profile information
 * @var {object} getEmpTokenSvcUrl
 */
var getEmpTokenSvcUrl = session.parameters.getEmpTokenSvcUrl;

/**
 * content_type is a variable injected by the calling transformation AddOnOAuthProcessing.xslt
 * and the variable holds the reference for the request payload mime type
 * @var {object} content_type
 */
var content_type = session.parameters.content_type;

/**
 * json_request is a variable injected by the calling transformation AddOnOAuthProcessing.xslt
 * and the variable holds the value of the json payload to be sent to the backend.
 * @var {object} json_request
 */
var json_request = session.parameters.token_request;

/**
 * lc is a variable injected by the calling transformation AddOnOAuthProcessing.xslt
 * and the variable holds the value of the log category to which datapower will write events
 * @var {object} lc
 */
var lc = session.parameters.lc;

/**
 * Set  a log  prefix  inorder  to identify  this  script  in the  logger
 * statements. The value ill be included in every log statement ritten by
 * this gateway script.
 * @var {object} lp
 */
var lp = "[EmpRes (GetEmployeeIDToken)]";

/**
 * Define a custom log category configured in DataPower for logging
 * the events to a custom log file of choice
 * @var {object} logConsole
 */
var logConsole = console.options({
    'category': lc
});

// a small error condition for handling the log category missing case
try {
    logConsole.debug("%s logging to %s", lp, logConsole);
} catch (e) {
    logConsole = console;
    logConsole.warn("%s %s category does not exist. falling back to default log category", lp, logConsole);
}

/**
 * The variable options define additional options for the outbound calls using the urlopen
 * library for calling any 3rd party services. It takes in metadata information required for
 * invokinf any http or rest calls.
 * @var {object} options
 */
var options = {
    target: getEmpTokenSvcUrl,
    sslClientProfile: sslclient,
    method: 'post',
    contentType: content_type,
    headers: {
        'Content-Type': 'application/json'
    },
    timeout: 30,
    data: JSON.parse(json_request)
};

/**
 * vRes is a free variable defined here, which will be used during the request
 * or response processing for holding and transforming buffer information
 * @var {object} vRes
 */
var vRes;

/**
 * vpRes is a free variable defined here, which will be used during the request
 * or response processing for holding and transforming buffer information
 * @var {object} vpRes
 */
var vpRes;

// open connection to the target introspection end-point and send data over
urlopen.open(options, function (error, response) {
    if (error) {
        // an error occurred during request sending or response header parsing
        tDiff = sm.timeElapsed - tInit;
        sharedCtx.setVar('get_emplpyee_token_status', 'false');
        logConsole.notice("%s time taken for the transaction error %d ms", lp, tDiff);
        logConsole.error("%s error %s occurred while calling GetEmployeeIDToken service", lp, error);
        session.output.write("urlopen connection error: " + JSON.stringify(error));
    } else {
        // read response data and get the response status code
        var responseStatusCode = response.statusCode;
        var reasonPhrase = response.reasonPhrase;
        logConsole.info("%s (GetEmployeeIDToken) reason %s and status_code %s", lp, reasonPhrase, responseStatusCode);
        // check if the response code is a 200 SUCCESS
        if (responseStatusCode === 200) {
            response.readAsJSON(function (readAsJSONErr, jsonData) {
                if (readAsJSONErr) {
                    logConsole.error("%s error %s while parsing json response from GetEmployeeIDToken", lp, JSON.stringify(readAsJSONErr));
                    response.readAsBuffers(function (readAsBuffersError, data) {
                        if (readAsBuffersError) {
                            sharedCtx.setVar('get_emplpyee_token_status', 'false');
                            logConsole.error("%s error on readAsBuffers %s", lp, readAsBuffersError);
                        } else {
                            if (data.slice(0, 5).toString() === '<?xml' || data.slice(0, 4).toString() === '<Get') {
                                logConsole.error("%s error parsing xml response %s from GetEmployeeIDToken", lp, XML.strigify(data));
                                sharedCtx.setVar('employeeTokenFault', data);
                            } else {
                                sharedCtx.setVar('get_emplpyee_token_status', 'false');
                                logConsole.error("%s error parsing binary response %s from GetEmployeeIDToken", lp, data);
                            }
                        }
                    })
                } else {
                    vRes = JSON.stringify(jsonData);
                    vpRes = JSON.parse(vRes);

                    var access_token = vpRes.access_token;
                    var id_token = vpRes.id_token;
                    var expires_in = vpRes.expires_in;
                    var scope = vpRes.scope;
                    var token_type = vpRes.token_type;

                    hm.response.set('access_token', access_token);
                    hm.response.set('id_token', id_token);
                    hm.response.set('expires_in', expires_in);
                    hm.response.set('scope', scope);
                    hm.response.set('token_type', token_type);
                }
            });
        } else {
            logConsole.error("%s get employee token fault", lp);
            sharedCtx.setVar('get_emplpyee_token_status', 'false');
        }
        tDiff = sm.timeElapsed - tInit;
        logConsole.notice("%s time taken for token validation transaction %d ms", lp, tDiff);
    }
}); // end of urlopen.open()
